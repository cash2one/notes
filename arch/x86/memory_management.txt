------------------------------------------------------------------------------------- |
段(Segment)寻址技术                                                                   |
80X86使用了一种称为段得寻址技术。这个寻址技术把内存空间分成一个或多个段的线性区域，一 |
个地址就有两部分:段的起始地址(段地址)和一个段内偏移。段地址部分使用16位的段选择符指定 |
，其中14位可以选择某个段，所以最多可有2^14即16384个段。段内偏移用32位的值来指定，即一 |
个段最大长度可达4G。                                                                  |
                                                                                      |
Logical address 逻辑地址(虚拟地址)                                                    |
程序中由16位的段和32位的偏移构成的48位地址或长指针称为一个逻辑地址。                  |
Included in the machine language instructions to specify the address of an operand or 
of an instruction. This type of address embodies the well-known 80 x 86 segmented architecture
that forces MS-DOS and Windows programmers to divide their programs into segments .
Each logical address consists of a segment and an offset (or displacement) that denotes the
distance from the start of the segment to the actual address.

Linear address (also known as virtual address)
A single 32-bit unsigned integer that can be used to address up to 4 GB that is, up to
4,294,967,296 memory cells. Linear addresses are usually represented in hexadecimal
notation; their values range from 0x00000000 to 0xffffffff.

Physical address
Used to address memory cells in memory chips. They correspond to the electrical signals
sent along the address pins of the microprocessor to the memory bus. Physical addresses
are represented as 32-bit or 36-bit unsigned integers.
物理地址                                                                              |
计算机的物理内存是字节的线性数组，每个字节具有一个唯一的物理地址。物理地址空间定义为处|
理器在其地址总线上能够产生的地址范围。                                                |
                                                                                      |
段寄存器                                                                              |
80X86为段部分提供了6个存放段选择符的段寄存器:CS、DS、ES、SS、FS和GS。                 |
CS: 代码段寄存器，由CS寻址的段称为当前代码段。EIP寄存器中包含了当前代码段内下一条要执 |
    行指令的段内偏移地址。因此要执行指令的地址可以表示成CS:[EIP]。                    |
SS；堆栈段寄存器。                                                                    |
DS: 数据段寄存器。                                                                    |
                                                                                      |
分段与分页                                                                            |
逻辑地址不能直接用于访问物理内存，而需要使用地址变换机制将它变换或映射到物理内存上。内|
存管理机制即用于将这种逻辑地址转换成物理内存地址。变换通常以内存块作为操作单位，分段机|
制和分页机制是两种广泛使用的地址变换技术。                                            |
                                                                                      |
地址变换过程                                                                          |
80X86在从逻辑地址到物理地址变换过程中使用了分段和分页两种机制。第一阶段使用分段机制把 |
程序的逻辑地址变换成处理器可以寻址内存空间(称为线性地址空间)中的地址。第二阶段使用分页|
机制把线性地址转换为物理地址。阶段一总是使用，阶段二可选。如果关闭分页，那么线性地址就|
直接映射为物理地址，即二者相同。                                                      |
                                                                                      |
分段机制                                                                              |
逻辑地址包括一个段选择符和一个偏移量。段选择符是一个段得唯一标示，每个段都有一个段描述|
符。段描述符指明段的大小、访问权限、段得特权级、段类型、段的基地址等。逻辑地址的偏移量|
部分加到段得基地址上就可以定位段中某个字节的位置。因此基地址加上偏移量就形成了处理器线|
性地址空间中的地址。如果处理器中有多个任务在运行，每个任务可分配各自的一套段。        |

----> Segment Selectors and Segmentation Registers
A logical address consists of two parts: a segment identifier and an offset that spe-
cifies the relative address within the segment. The segment identifier is a 16-bit f-
ield called the Segment Selector, while the offset is a 32-bit field. 
                 +------------------+
Segment Selector | index | TI | RPL |
                 +------------------+
To make it easy to retrieve segment selectors quickly, the processor provides segmen-
tation registers whose only purpose is to hold Segment Selectors; these registers are 
called cs, ss, ds, es, fs, and gs. 
----> Segment Descriptors
Each segment is represented by an 8-byte Segment Descriptor that describes the segme-
nt characteristics. Segment Descriptors are stored either in the Global Descriptor T-
able (GDT ) or in the Local Descriptor Table(LDT).
Usually only one GDT is defined , while each process is permitted to have its own LDT 
if it needs to create additional segments besides those stored in the GDT. The addre-
ss and size of the GDT in main memory are contained in the gdtr control register, wh-
ile the address and size of the currently used LDT are contained in the  ldtr control 
register.
                                                                                      |
分页机制                                                                              |
多任务系统通常定义的线性地址空间都要比其含有的物理内存容量大得多，所以需要使用某种"虚 |
拟化"线性地址空间的方法，即使用虚拟存储技术。分页机制支持虚拟存储技术。在使用虚拟存储 |
的环境中，大容量的线性地址空间需要使用小块的物理内存(RAM或ROM)以及某些外部存储空间(如 |
硬盘)来模拟。当使用分页是，每个段被划分成页面(通常每页为4KB大小)，页面会被存储于物理内|
存中或硬盘上。操作系统通过维护一个页目录和一些页表来留意这些页面。当程序(或任务)试图访|
问线性地址空间中的一个地址位置时，处理器就会使用页目录和页表把线性地址转换成一个物理地|
址，然后再内存位置上执行所要求的操作(读或写)。如果当前访问的页面不在物理内存中，处理器|
就会中断程序的执行(通常产生一个也错误异常)。然后操作系统就可以从硬盘上把该页面读入物理|
内存中，并继续执行刚才被中断的程序(就好像没有发生缺页)。                              |
                                                                                      |
通过控制寄存器CR0的PG位可以启用分页机制(PG=1)。                                       |
                                                                                      |
80X86使用4K(2^12)字节固定大小的页面，并且对齐与4K地址边界处。分页机制把2^32字节(4G)的 |
线性地址空间划分成2^20(1M=1048576)个页面，线性地址的低12比特位可以作为页内偏移量直接作|
为物理地址的低12位。在两种情况下一个页面可以被标注为无效: 操作系统不支持的线性地址(程 |
序出错)；对应在虚拟内存系统中的页面在磁盘上而非在物理内存中(缺页异常)。               |
                                                                                      |
页表(page tabel)
页表可以看做是简单的2^20物理地址数组，存放在物理地址空间中，用来实现分页转换功能。线性|
地址到物理地址的映射功能可以简单地看作是进行数组查找。线性地址的高20位构成这个数组的索|
引值，用于选择对应页面的物理(基)地址。低12位给出页面中的偏移量，加上页面的基地址最终形|
成对应的物理地址。页表中的每个页表项大小为32位。由于只需要20来存放页面的物理基地址，因|
此剩下的12位可用于存放诸如页面是否存在等属性信息。                                    |
                                                                                      |
两级页表                                                                              |
第一级页表成为页目录(page directory)。它被存放在1页4K页面中，具有2^10个4字节长度的表项|
。这些页表项指向对应的二级表。线性地址的最高10位用作一级表中的索引值来选择2^10个二级表|
之一。页目录的基地址存放在CR3寄存器中。                                               |
第二级表项称为页表(page table)，长度也是1个页面，最多有1K个4字节的表项。每个4字节表项 |
含有相关页面的20位物理基地址。二级页表使用线性地址中间10位作为表项索引值。            |
这样转换过程如下:取出线性地址的高10位索引到一个表项，这个表项指向二级页表，然后用线性 |
地址的中间10位在二级页表中选择一个表项，这个表项存储着基地址，这个基地址加上线性地址的|
最后12位构成最终的物理地址。                                                          |

----> pages, page frames, page tables
For the sake of efficiency, linear addresses are grouped in fixed-length intervals c-
alled pages ; contiguous linear addresses within a page are mapped into contiguous p-
hysical addresses. Following the usual convention, we shall use the term "page" to r-
efer both to a set of linear addresses and to the data contained in this group of ad-
dresses.

The paging unit thinks of all RAM as partitioned into fixed-length page frames (some-
times referred to as physical pages ). Each page frame contains a page that is, the -
length of a page frame coincides with that of a page. A page frame is a constituent -
of main memory, and hence it is a storage area. It is important to distinguish a page 
from a page frame; the former is just a block of data, which may be stored in any pa-
ge frame or on disk.

The data structures that map linear to physical addresses are called page tables ; t-
hey are stored in main memory and must be properly initialized by the kernel before -
enabling the paging unit.

+-----------------+  Segmentation   +----------------+ Paging  +------------------+
| Logical address |---------------->| Linear address |-------->| Physical address |
+-----------------+    unit         +----------------+  unit   +------------------+


----> Regular Paging

+-------------------------------------------------------------------------------+
| Page Frame Address(31~12) | AVL(11~9) | 0 | 0 | D | A | 0 | 0 | U/S | R/W | P |
+-------------------------------------------------------------------------------+

Page Frame Address                                                                   
    Field containing the 20 most significant bits of a page frame physical address. -
    Because each page frame has a 4-KB capacity, its physical address must be a mult-
    iple of 4096, so the 12 least significant bits of the physical address are always 
    equal to 0. If the field refers to a Page Directory, the page frame contains a P-
    age Table; if it refers to a Page Table, the page frame contains a page of data.
P Present flag
    If it is set, the referred-to page (or Page Table) is contained in main memory; -
    if the flag is 0, the page is not contained in main memory and the remaining ent-
    ry bits may be used by the operating system for its own purposes. If the entry of 
    a Page Table or Page Directory needed to perform an address translation has the -
    Present flag cleared, the paging unit stores the linear address in a control reg-
    ister named cr2 and generates exception 14: the Page Fault exception.
A Accessed flag
    Set each time the paging unit addresses the corresponding page frame. This flag -
    may be used by the operating system when selecting pages to be swapped out. The -
    paging unit never resets this flag; this must be done by the operating system.
D Dirty flag
    Applies only to the Page Table entries . It is set each time a write operation is 
    performed on the page frame . As with the Accessed flag, Dirty may be used by the 
    operating system when selecting pages to be swapped out. The paging unit never r-
    esets this flag; this must be done by the operating system.
R/W(Read/Write) U/S(User/Supervisor)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
|                               Regular Paging                                      |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~							   
+------------------------------------------------+
| Directory(31~22) | Table(21~12) | Offset(11~0) |  Linear Address
+---|--------------------|--------------------|--+
    |                    |                    |
    |                    |                    |
    |                    |                    |     +------+
	|                    |                    |     |      |
	|                    |     page table     |     |      |
	|                    |       +----+       +---->| page |
	|                    |	     |    |       |     |      |
    | page directory     |	     |----|       |     |      |
    |     +----+         +------>|    |------------>+------+ 
    |     |    |         |       |----|
    |     |----|         |       |    |
    +---->|    |---------------->+----+
	|     |----|
	|     |    |
cr3------>+----+
-------------------------------------------------------------------------------------
