----------------------------------------->E:\working\mygit\notes\language\python\class.txt
#类是创建实例的模板，实例是具体的对象

######### 1 通过class关键字定义类
  class Student(object):
      pass	 
#class后是类名Student，类名通常是大写开头的单词
#紧接着是(object)，表示该类是从哪个类继承下来的，通常，如果没有合适的继承类，就使用object类，这是所有类最终都会继承的类。
#创建实例是通过类名+()实现的
bart = Student() #创建了一个类的实例bart

######### 2 类的属性和方法
# 2.1 属性:类中封装的变量 如下面的name、score
#实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问
#不能直接访问__name是因为Python解释器对外把__name变量改成了_Student__name，所以，仍然可以通过_Student__name来访问__name变量：
>>> bart._Student__name
'Bart Simpson'
#变量名类似__xxx__的，是特殊变量，特殊变量是可以直接访问的，不是private变量，
#以一个下划线开头的实例变量名，比如_name表示虽然我可以被访问，但是，请把我视为私有变量，不要随意访问
# 2.2 方法:类中封装的函数 如下面的print_score

######### 3 创建实例的时候，可以初始化一些默认属性
#  通过定义一个特殊的__init__方法，在创建实例的时候，就把name，score等属性绑上去：
  
  class Student(object):

    def __init__(self, name, score):
        self.name = name
        self.score = score
		
    def print_score(self):
        print '%s: %s' % (self.name, self.score)		
#__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，就可以把各种属性绑定到self，因为self就指向创建的实例本身。
#有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，		
>>> bart = Student('Bart Simpson', 59)
>>> bart.name
'Bart Simpson'
>>> bart.score
59
>>> bart.print_score()
Bart Simpson: 59
#Python允许对实例变量绑定任何数据，也就是说，对于两个实例变量，虽然它们都是同一个类的不同实例，但拥有的变量名称都可能不同：
>>> bart = Student('Bart Simpson', 59)
>>> lisa=Student('Lisa Simpson', 87)
>>> bart.age = 8
>>> bart.age
8
>>> lisa.age
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'age'
######### 4 继承和多态
#子类:定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass）
#     子类获得父类的全部功能，如果子类定义了相同的方法则覆盖父类的方法。
#     在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行
#父类:被继承的class称为基类、父类或超类（Base class、Super class）。
#多态:有了继承，才能有多态。多态是指同一个方法在父类和子类中有不同的功能。
#     例如父类A定义了一个方法f,他的子类B和C分别重新定义了方法f.如果一个函数的入参是父类类型,此时子类也可以直接调用
#     子类B调用使用B中定义的方法,子类C调用使用C中定义的方法。
#************************************************************************************** 
#-->-->-->-->-->-->-->-->-->-->-->--> 5 动态添加属性和方法 <--<--<--<--<--<--<--<--<--*
#**************************************************************************************  
#正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。先定义class：
>>> class Student(object):
...     pass
...
#然后，尝试给实例绑定一个属性：
>>> s = Student()
>>> s.name = 'Michael' # 动态给实例绑定一个属性
>>> print s.name
Michael
#还可以尝试给实例绑定一个方法：
>>> def set_age(self, age): # 定义一个函数作为实例方法
...     self.age = age
...
>>> from types import MethodType
>>> s.set_age = MethodType(set_age, s, Student) # 给实例绑定一个方法
>>> s.set_age(25) # 调用实例方法
>>> s.age # 测试结果
25
#但是，给一个实例绑定的方法，对另一个实例是不起作用的：
>>> s2 = Student() # 创建新的实例
>>> s2.set_age(25) # 尝试调用方法
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'set_age'
#为了给所有实例都绑定方法，可以给class绑定方法：
>>> def set_score(self, score):
...     self.score = score
...
>>> Student.set_score = MethodType(set_score, None, Student)
#给class绑定方法后，所有实例均可调用：
>>> s.set_score(100)
>>> s.score
100
>>> s2.set_score(99)
>>> s2.score
99
#************************************************************************************** 
#-->-->-->-->-->-->-->-->-->-->-->--> 6 限制类的属性和方法 <--<--<--<--<--<--<--<--<--*
#************************************************************************************** 
#如果我们想要限制class的属性怎么办？比如，只允许对Student实例添加name和age属性。
#为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class能添加的属性：
>>> class Student(object):
...     __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称
...
#然后，我们试试：
>>> s = Student() # 创建新的实例
>>> s.name = 'Michael' # 绑定属性'name'
>>> s.age = 25 # 绑定属性'age'
>>> s.score = 99 # 绑定属性'score'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Student' object has no attribute 'score'
#由于'score'没有被放到__slots__中，所以不能绑定score属性，试图绑定score将得到AttributeError的错误。
#使用__slots__要注意，__slots__定义的属性仅对当前类起作用，对继承的子类是不起作用的：
>>> class GraduateStudent(Student):
...     pass
...
>>> g = GraduateStudent()
>>> g.score = 9999
#除非在子类中也定义__slots__，这样，子类允许定义的属性就是自身的__slots__加上父类的__slots__。
#************************************************************************************** 
#-->-->-->-->-->-->-->-->-->-->--> 7 把方法变成属性@property <--<--<--<--<--<--<--<-- *
#************************************************************************************** 
#Python内置的@property装饰器就是负责把一个方法变成属性调用的：
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
#@property的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，
#只需要加上@property就可以了，此时，@property本身又创建了另一个装饰器@score.setter，
#负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：
>>> s = Student()
>>> s.score = 60 # OK，实际转化为s.set_score(60)
>>> s.score # OK，实际转化为s.get_score()
60
>>> s.score = 9999
Traceback (most recent call last):
  ...
ValueError: score must between 0 ~ 100!
#注意到这个神奇的@property，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。
#还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：
class Student(object):

    @property
    def birth(self):
        return self._birth

    @birth.setter
    def birth(self, value):
        self._birth = value

    @property
    def age(self):
        return 2014 - self._birth
#上面的birth是可读写属性，而age就是一个只读属性，因为age可以根据birth和当前时间计算出来。
#
#
#
#
#

#
#
#
#
#
#



--------------------------------------》new add  E:\working\mygit\notes\language\python\buildinfunction\type.txt
#type(object)
#判断对象类型，使用type()函数：
#基本类型都可以用type()判断：
>>> type(123)
<type 'int'>
>>> type('str')
<type 'str'>
>>> type(None)
<type 'NoneType'>
#如果一个变量指向函数或者类，也可以用type()判断：
>>> type(abs)
<type 'builtin_function_or_method'>
#但是type()函数返回的是什么类型呢？它返回type类型。如果我们要在if语句中判断，就需要比较两个变量的type类型是否相同：
>>> type(123)==type(456)
True
>>> type('abc')==type('123')
True
>>> type('abc')==type(123)
False
#但是这种写法太麻烦，Python把每种type类型都定义好了常量，放在types模块里，使用之前，需要先导入：
>>> import types
>>> type('abc')==types.StringType
True
>>> type(u'abc')==types.UnicodeType
True
>>> type([])==types.ListType
True
>>> type(str)==types.TypeType
True
#最后注意到有一种类型就叫TypeType，所有类型本身的类型就是TypeType，比如：
>>> type(int)==type(str)==types.TypeType
True
