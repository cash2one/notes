http://blog.csdn.net/feitianxuxue/article/details/41129677

最近在做一个漏洞展示平台，攻击实现部分使用python实现，c语言实现部分使用libcli库做一个类似telnet的东东，回调函数run的时候调用python模块。针对c调用python，做个了小demo

python模块：demo.py

def print_arg(str):
    print str

def add(a,b):
    print 'a=', a
    print 'b=', b
    return a + b

class Class_A:
    def __init__(self):
        print "init"
    def fun(self, str):
        print 'hello', str
        return str


class dedecms_get_webshell:
    def __init__(self):
        '''
        '''
        self._run = True

    #must rewrite function
    def check(self,site,port):
        '''
        '''
        print "Exploiting Host:%s,Port:(%d)......" % (site,port)
        flag = 1
        if flag:
            content={"flag":1,"content":"POST http://www.baidu.com/shell.php (cmd)"}
        else:
            content={"flag":0,"content":"POST http://www.baidu.com/shell.php (cmd)"}
        return content
if __name__=="__main__":
    site="www.baidu.com"
    port=80
    obj = dedecms_get_webshell()
    ret=obj.check(site,port)
print ret

分析：
1. print_arg定义了一个传参的函数

2. add 定义了一个传如多个参数，且有返回值的函数

3. Class_A定义了一个类及类的一个方法fun（传参数，有返回值）

4. dedecms_get_webshell定一个了类及类的一个方法check(传多个参数，返回值是个元组)

下面使用c语言调用demo.py文件中的函数。

测试函数：

#include <Python.h>

int main(int argc, char* argv[])
{
    test();
    test1();
    test2();
    test3();
    test4();

    return 0;
}
逐个分析：

//导出当前环境变量

void getcurrent()
{
    PyRun_SimpleString("import sys");
    PyRun_SimpleString("sys.path.append('./')");
    return;
}

1. 一个最基本的调用方式

void test()
{
    Py_Initialize();//初始化python
    PyRun_SimpleString("print 'hello python'");//直接运行python代码
    Py_Finalize(); //释放python
    return;
}

分析：直接运行python 代码，在调用的时候必须先做初始化操作（Py_Initialize），调用完后做清理工作（Py_Finalize）
2. 调用模块中的一个普通函数

void test1()
{
    Py_Initialize();//初始化python
    getcurrent();

    PyObject *pModule = NULL, *pFunc = NULL, *pArg = NULL;
    pModule = PyImport_ImportModule("demo");//引入模块
    pFunc = PyObject_GetAttrString(pModule, "print_arg");//直接获取模块中的函数
    pArg = Py_BuildValue("(s)", "hello_python"); //参数类型转换，传递一个字符串。将c/c++类型的字符串转换为python类型，元组中的python类型查看python文档
    PyEval_CallObject(pFunc, pArg); //调用直接获得的函数，并传递参数

    Py_Finalize(); //释放python
    return;
}

分析：先引用模块（PyImport_ImportModule），然后获取模块中的函数（PyObject_GetAttrString），对c传入python 的参数做类型转换（Py_BuildValue("(s)","hello_python")），最后直接调用函数并传递参数（PyEval_CallObject）。

3. 调用模块中的一个函数（多参数，带返回值）

void test2()
{
    Py_Initialize();
    getcurrent();

    PyObject *pModule = NULL, *pDict = NULL, *pFunc = NULL, *pArg = NULL, *result = NULL;
    pModule = PyImport_ImportModule("demo"); //引入模块
    pDict = PyModule_GetDict(pModule); //获取模块字典属性 //相当于Python模块对象的__dict__ 属性，得到模块名称空间下的字典对象
    pFunc = PyDict_GetItemString(pDict, "add"); //从字典属性中获取函数
    pArg = Py_BuildValue("(i, i)", 1, 2); //参数类型转换，传递两个整型参数
    result = PyEval_CallObject(pFunc, pArg); //调用函数，并得到python类型的返回值
    int sum;
    PyArg_Parse(result, "i", &sum); //将python类型的返回值转换为c/c++类型
    printf("sum=%d\n", sum);

    Py_Finalize();
}
4. 调用模块中简单的一个类（单个返回值）

void test3()
{
    Py_Initialize();
    getcurrent();

    PyObject *pModule = NULL, *pDict = NULL, *pClass = NULL, *pInstance = NULL, *result = NULL;
    pModule = PyImport_ImportModule("demo"); //引入模块
    pDict = PyModule_GetDict(pModule); //获取模块字典属性
    pClass = PyDict_GetItemString(pDict, "Class_A"); //通过字典属性获取模块中的类
    pInstance = PyInstance_New(pClass, NULL, NULL);//实例化获取的类
    result = PyObject_CallMethod(pInstance, "fun", "(s)", "python_000"); //调用类的方法
    char* name=NULL;
    PyArg_Parse(result, "s", &name); //将python类型的返回值转换为c/c++类型
    printf("%s\n", name);

    Py_Finalize();
}
5. 调用模块中一个简单的类（返回值是个元组）

void test4()

{

Py_Initialize();

getcurrent();

PyObject *pModule = NULL, *pDict = NULL,*pClass = NULL, *pInstance = NULL, *result = NULL;

pModule =PyImport_ImportModule("demo"); //引入模块

pDict = PyModule_GetDict(pModule); //获取模块字典属性

pClass = PyDict_GetItemString(pDict,"dedecms_get_webshell"); //通过字典属性获取模块中的类

pInstance = PyInstance_New(pClass, NULL,NULL);

result = PyObject_CallMethod(pInstance,"check", "(s,i)", "www.baidu.com", 80);

int flag;

char*content = NULL;

PyObject *obj_content =PyDict_GetItemString(result, "content");

content = PyString_AsString(obj_content);

PyObject *obj_flag =PyDict_GetItemString(result, "flag");

flag = PyInt_AsLong(obj_flag);

printf("content: %s, flag: %d\n",content, flag);

Py_Finalize();

}

Makefile书写：

all: test

test: pytest.o
    gcc -L/usr/lib/python2.7/ -lpython2.7 -ldl pytest.o -o test

pytest.o: pytest.c
    gcc -g -std=gnu99 -Wall -c  pytest.c -I/usr/include/python2.7/ 

clean:
    @rm -rf *.o *.pyc test

针对python不同的版本，使用2.5,2.6等，库的路径参照安装的路径。

本打算展开多写些东西，结果草草完事。