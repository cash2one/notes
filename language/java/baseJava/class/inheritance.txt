
--> inheritance
 In this chapter, you will learn about inheritance, another fundamental concept of  -
 object-oriented programming. The idea behind inheritance is that you can create  new 
 classes that are built on existing classes. When you inherit from an existing class, 
 you reuse (or inherit) its methods, and you can add new methods and fields to  adapt 
 your new class to new situations. This technique is essential in Java programming.

--> @extends, defining subclasses
 The keyword extends indicates that you are making a new class that derives from an -
 existing class. The existing class is called the superclass, base class, or parent -
 class. The new class is called the subclass, derived class, or child class. The ter-
 ms superclass and subclass are those most commonly used by Java programmers.
 
 class Manager extends Employee
 {
   added methods and fields
 }
 
 Our Manager class has a new field to store the bonus, and a new method to set it:
 
 public class Manager extends Employee
 {
     private double bonus;
     . . .
     public void setBonus(double bonus)
     {
         this.bonus = bonus;
     }
 }
 
 you can use methods such as getName and getHireDay with Manager objects. Even though 
 these methods are not explicitly defined in the Manager class, they are automatical-
 ly inherited from the Employee superclass. Similarly, the fields name, salary, and -
 hireDay are taken from the superclass. Every Manager object has four fields: name, -
 salary, hireDay, and bonus.
 
 All inheritance in Java is public inheritance;
 
 a subclass can add fields, and it can add methods or override the methods of the su-
 perclass. However, inheritance can never take away any fields or methods.
 
--> overriding methods and @super
 However, some of the superclass methods are not appropriate for the Manager subclass. 
 In particular, the getSalary method should return the sum of the base salary and the 
 bonus. You need to supply a new method to override the superclass method:

 At first glance, it appears to be simple,just return the sum of the salary and bonus 
 fields:
         public double getSalary()
         {
             return salary + bonus; // won't work, 
         }
 However, that won't work. The getSalary method of the Manager class has no direct a-
 ccess to the private fields of the superclass . This means that the getSalary method 
 of the Manager class cannot directly access the salary field, even though every Man-
 ager object has a field called salary. Only the methods of the Employee class have -
 access to the private fields. If the Manager methods want to access those private f-
 ields, they have to do what every other method does, use the public interface, in t-
 his case, the public getSalary method of the Employee class. So, let's try this aga-
 in. You need to call getSalary instead of simply accessing the salary field.
		 public double getSalary()
		 {
		    double baseSalary = getSalary(); // still won't work
		    return baseSalary + bonus;
		 }
 The problem is that the call to getSalary simply calls itself, because the Manager -
 class has a getSalary method (namely, the method we are trying to implement). The c-
 onsequence is an infinite chain of calls to the same method, leading to a program c-
 rash. We need to indicate that we  want to call the getSalary method of the Employee
 super-class, not the current class. You use the special keyword super for this purp-
 ose. The call
         super.getSalary()
 calls the getSalary method of the Employee class. Here is the correct version of the 
 getSalary method for the Manager class:
 
 Here is the correct version of the getSalary method for the Manager class:
  public double getSalary()
  {
      double baseSalary = super.getSalary(); // ok
      return baseSalary + bonus;
  }

 Note
 Some people think of super as being analogous to the this reference. However, that -
 analogy is not quite accurate: super is not a reference to an object. For example, -
 you cannot assign the value super to another object variable. Instead, super is a s-
 pecial keyword that directs the compiler to invoke the superclass method. 

 Note
 Recall that the @this keyword has two meanings: to denote a reference to the implic-
 it parameter and to call another constructor of the same class. Likewise, the @super 
 keyword has two meanings: to invoke a superclass method and to invoke a superclass -
 constructor. When used to invoke constructors, the @this and @super keywords are cl-
 osely related. The constructor calls can only occur as the first statement in anoth-
 er constructor. The constructor parameters are either passed  to another constructor 
 of the same class (this) or a constructor of the superclass (super). 
 
--> constructor

     public Manager(String n, double s, int year, int month, int day)
     {
         super(n, s, year, month, day);
         bonus = 0;
     }
	 
 Here, the keyword super has a different meaning. The instruction
     super(n, s, year, month, day);
 is shorthand for "call the constructor of the Employee superclass with n, s, year, -
 month, and day as parameters." Since the Manager constructor cannot access the priv-
 ate fields of the Employee class, it must initialize them through a constructor. The 
 constructor is invoked with the special super syntax. The call using super must be -
 the first statement in the constructor for the subclass.
 
 The call using super must be the first statement in the constructor for the subclas-
 s.

 If the subclass constructor does not call a superclass constructor explicitly, the -
 no-argument constructor of the superclass is invoked. If the superclass does not ha-
 ve a no-argument constructor and the subclass constructor does not call another sup-
 erclass constructor explicitly, the Java compiler reports an error. 

--> Inheritance Hierarchies
  null
 
--> polymorphism, dynamic binding
 In the Java programming language, object variables are polymorphic. A variable of t-
 ype Employee can refer to an object of type Employee or to an object of any subclas-
 s of the Employee class (such as Manager, Executive, Secretary, and so on).

 We make a new manager and set the manager's bonus:
     Manager boss = new Manager("Carl Cracker", 80000, 1987, 12, 15);
     boss.setBonus(5000);
 We make an array of three employees:
     Employee[] staff = new Employee[3];
 We populate the array with a mix of managers and employees:
     staff[0] = boss;
     staff[1] = new Employee("Harry Hacker", 50000, 1989, 10, 1);
     staff[2] = new Employee("Tony Tester", 40000, 1990, 3, 15); 

 We print out everyone's salary:
     for (Employee e : staff)
         System.out.println(e.getName() + " " + e.getSalary());
 This loop prints the following data:
     Carl Cracker 85000.0
     Harry Hacker 50000.0
     Tommy Tester 40000.0

 When @e refers to an Employee object,then the call e.getSalary() calls the getSalary 
 method of the Employee class. However, when e refers to a Manager object, then the -
 getSalary method of the Manager class is called instead. The virtual machine knows -
 about the actual type of the object to which e refers, and therefore can invoke  the 
 correct method. The fact that an object variable (such as the variable e) can  refer 
 to multiple actual types is called polymorphism. Automatically selecting the approp-
 riate method at runtime is called dynamic binding.

 1 Java does not support multiple inheritance.
 2 you can use a subclass object whenever the program expects a superclass object. e-
   very manager is an employee. not every employee is a manager. 

--> you can use a subclass object whenever the program expects a superclass object. 
 every object of the subclass is an object of the superclass. For example, every man-
 ager is an employee. Thus, it makes sense for the Manager class to be a subclass  of 
 the Employee class. 

 For example, you can assign a subclass object to a superclass variable. 
 
     Employee e;
     e = new Employee(. . .);  // Employee object expected
     e = new Manager(. . .); // OK, Manager can be used as well
	 
 In the Java programming language, object variables are polymorphic. A variable of t-
 ype Employee can refer to an object of type Employee or to an object of any subclass 
 of the Employee class (such as Manager, Executive, Secretary, and so on).
 
     Manager boss = new Manager(. . .);
     Employee[] staff = new Employee[3];
     staff[0] = boss;
	 
 In this case, the variables staff[0] and boss refer to the same object. However,   -
 staff[0] is considered to be only an Employee object by the compiler. That means yo-
 u can call
     boss.setBonus(5000); // OK
 but you can't call
     staff[0].setBonus(5000); // ERROR
	 
 The declared type of staff[0] is Employee, and the setBonus method is not a method -
 of the Employee class. However, you cannot assign a superclass reference to a subcl-
 ass variable. For example, it is not legal to make the assignment
     Manager m = staff[i]; // ERROR
 The reason is clear: Not all employees are managers. If this assignment were to suc-
 ceed and m were to refer to an Employee object that is not a manager , then it would 
 later be possible to call m.setBonus(...) and a runtime error would occur. 

 Caution:
 In Java, arrays of subclass references can be converted to arrays of superclass ref-
 erences without a cast. For example, consider this array of managers:
     Manager[] managers = new Manager[10];
 It is legal to convert this array to an Employee[] array:
     Employee[] staff = managers; //no compiler error, but
 The compiler will allow this assignment. But actually, something surprising is goin-
 g on. Keep in mind that managers and staff are references to the same array. Now co-
 nsider the statement
     staff[0] = new Employee("Harry Hacker", ...); 
 staff[0] and managers[0] are the same reference. That would be very bad, calling   -
     managers[0].setBonus(1000) 
 would try to access a nonexistent instance field and would corrupt neighboring memo-
 ry. To make sure no such corruption can occur, all arrays remember the element  type 
 with which they were created, and they monitor that only compatible  references  are 
 stored into them. For example, the array created as new Manager[10] remembers that -
 it is an array of managers. Attempting to store an Employee reference causes an    -
 ArrayStore Exception.
 
--> final
 Classes that cannot be extended are called final classes, and you use the @final mo-
 difier in the definition of the class to indicate this. For example, suppose we want 
 to prevent others from subclassing the Executive class. Simply declare the class us-
 ing the final modifier, as follows:
 
 public final class Executive extends Manager
 {
     . . .
 } 
 
 Recall that fields can also be declared as final. A final field cannot be changed a-
 fter the object has been constructed. However, if a class is declared final, only t-
 he methods, not the fields, are automatically final.
 
--> abstract
 If you use the @abstract keyword, you do not need to implement the method at all.
 
 public abstract String getDescription(); // no implementation required
 
 For added clarity, a class with one or more abstract methods must itself be declared
 abstract.

 public abstract class Person
 {
     . . .
     public abstract String getDescription();
 }

 In addition to abstract methods, abstract classes can have fields and concrete meth-
 ods. A class can even be declared as abstract though it has no abstract methods.
 
 Abstract methods act as placeholders for methods that are implemented in the subcla-
 sses. When you extend an abstract class, you have two choices. You can leave some or 
 all of the abstract methods undefined; then you must tag the subclass as abstract as 
 well. Or you can define all methods, and the subclass is no longer abstract.
 
 Abstract classes cannot be instantiated. Note that you can still create object vari-
 ables of an abstract class, but such a variable must refer to an object of a nonabs-
 tract subclass. For example:
 
 Person p = new Student("Vince Vu", "Economics");

--> protected
  Any features declared private won’t be visible to other classes. 
  A subclass cannot access the private fields of its superclass.
  
  There are times, however, when you want to restrict a method to subclasses only or, 
  less commonly, to allow subclass methods to access a superclass field. In that cas-
  e, you declare a class feature as protected. 
  
  Here is a summary of the four access modifiers in Java that control visibility:
  1. Visible to the class only (private).
  2. Visible to the world (public).
  3. Visible to the package and all subclasses (protected).
  4. Visible to the package—the (unfortunate) default. No modifiers are needed



--> 




















