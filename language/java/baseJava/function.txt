--> lambda expressions
 lambda expressions in Java: parameters, the -> arrow, and an expression. 

 (String first, String second) -> first.length() - second.length()

 If the code carries out a computation that doesn¡¯t fit in a single expression, write 
 it exactly like you would have written a method: enclosed in {} and with explicit r-
 eturn statements. For example,
 
 (String first, String second) ->
 {
     if (first.length() < second.length()) return -1;
     else if (first.length() > second.length()) return 1;
     else return 0;
 }
 
 If a lambda expression has no parameters, you still supply empty parentheses, just -
 as with a parameterless method:

 () -> { for (int i = 100; i >= 0; i--) System.out.println(i); }
 
 If the parameter types of a lambda expression can be inferred, you can omit them. F-
 or example,

 Comparator<String> comp
 = (first, second) // Same as (String first, String second)
 -> first.length() - second.length();
 
 If a method has a single parameter with inferred type, you can even omit the parent-
 heses:

 ActionListener listener = event ->
 System.out.println("The time is " + new Date()");
 // Instead of (event) -> . . . or (ActionEvent event) -> . . .

 You never specify the result type of a lambda expression. It is always inferred fro-
 m context. For example, the expression

 (String first, String second) -> first.length() - second.length()

 can be used in a context where a result of type int is expected.
 
 
 
 
 
-->