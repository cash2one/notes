--> install
 依赖：python(with zlib), 未发现其他依赖(ubuntu)
                                                                                     |
 如果没有安装lapack/blas也可以编译成功，编译脚本会用自带的linalg/lapack_lite目录下的 |
 未优化实现编译出动态库lapack_lite.so供上层的Python应用程序调用。总之，NumPy是否依赖 |
 lapack和atlas库，主要影响的是其性能，其功能不受影响。另外，在实际开发环境中，用到   |
 Numpy的地方通常也会用到SciPy，而SciPy是必须依赖lapack和atlas库的，所以，实际项目中使|
 用的NumPy库通常会依赖lapack和atlas。
 
 -->--> src
  1 tar -zxvf xxx.tar.gz
  
  2 python setup.py build
    编译前会检查是否有blas lapack库，如果没有也不影响编译。主要影响的是其性能，其功能
	不受影响。注意lapack/blas和numpy要用相同的fortrun编译器。
	To build with g77:
    python setup.py build --fcompiler=gnu
    To build with gfortran:
    python setup.py build --fcompiler=gnu95
	
  3 python setup.py install

 -->--> 方法2
  1 把whl文件拷贝到 C:\Python27\Scripts
  2 pip install numpy-1.9.2+mkl-cp33-none-win_amd64.whl
  3 C:\Python27\Scripts>pip2.7.exe install "numpy-1.9.2+mkl-cp27-none-win_amd64.whl"   (windows 10 成功安装)
 
 -->--> 方法3
  pip install numpy
  
 -->--> 方法4
  numpy-1.8.1-win32-superpack-python2.7.exe
  exe文件, 双击安装即可.

--> 资源
 http://www.lfd.uci.edu/~gohlke/pythonlibs/        下载.whl文件
 http://www.lfd.uci.edu/~gohlke/pythonlibs/#numpy  
 http://sourceforge.net/projects/numpy/files/NumPy/1.8.1/   下载.exe文件

--> 安装问题
 http://stackoverflow.com/questions/11200137/installing-numpy-on-64bit-windows-7-with-python-2-7-3
 http://www.goldencui.org/2014/10/02/windows64%E4%BD%8D%E7%8E%AF%E5%A2%83%E4%B8%8Bpython%E5%AE%89%E8%A3%85numpy%E3%80%81scipy%E5%92%8Cmatplotlib/   windows64位环境下python安装numpy、scipy和matplotlib


 numpy :http://sourceforge.net/projects/numpy/files/NumPy/1.8.1/ 
 scipy:http://sourceforge.net/projects/scipy/files/
 matplotlib:matplotlib-1.1.0.win32-py2.7
 以上都是exe文件，双击安装即可。


--> 如何编译不依赖lapack和atlas库的NumPy包
 http://blog.csdn.net/slvher/article/details/44833107

 NumPy是科学计算方面的一个Python库，在数据挖掘或机器学习或科学统计等领域经常被用到，官网在这里。
 在实际业务中，为发挥NumPy的高性能，在编译NumPy时会依赖一些经过特别优化的第三方科学计算库。对于初次接触NumPy的新手来说，从源码编译安装依赖外部库的NumPy通常不是一个简单的任务。
 事实上，NumPy这个Python包本身不需依赖任何第三方库就能完成编译和安装使用，只不过其计算性能会受到影响。
 本篇笔记记录的是如何在不依赖外部库的情况下来编译使用NumPy，这样做为了理清NumPy与第三方库的关系（相信很多NumPy初学者会分不清NumPy和几个生僻第三方库的关系，以为没有第三方库就不能编译使用NumPy）。

 备注1：下面关于NumPy包的安装过程是借助virtualenv在一个隔离的Python环境下实验的，所以，假定我们已经通过"virtualenv numpy-env"命令创建并通过activate操作进入了隔离环境。
 备注2：本篇笔记用到的gcc版本是gcc version 3.4.5，很旧的版本，不过依然可以编译最新版的NumPy v1.9.2。
 1. 高性能NumPy包通常会依赖LAPACK和ATLAS库
 lapack和atlas是科学计算领域的两个针对线性代数运算的经过特别优化的非常强大的工具库，关于它们的说明，可以分别查看lapack官网和atlas官网的说明。
 经常与这两个库一起出现的还有个BLAS库，其官网在这里。
 关于这3个库之间的关系，可以参考StackOverflow的这篇问答贴What is the relation between BLAS, LAPACK and ATLAS。

 2. 如何不依赖第三方计算库编译NumPy
 根据NumPy官方文档Building and installing NumPy在Building from source部分关于Linear Algebra libraries的说明，这两个库对于安装NumPy包来说并不是强制依赖的。
 下面就是不依赖lapack和atlas库的情况下，源码编译/安装NumPy包的步骤。
 从官网下载NumPy源码（以最新版numpy-1.9.2.tar.gz为例），解压并cd至解压目录后，可以通过下面的方法安装未经优化的NumPy库：
 [plain] view plain copy 在CODE上查看代码片派生到我的代码片
 $ export BLAS=None  
 $ export LAPACK=None  
 $ export ATLAS=None  
 $ python setup.py build > bld.log  
 $ python setup.py install  
 编译/安装完成后，可以这样来验证：
 [python] view plain copy 在CODE上查看代码片派生到我的代码片
 >>> import numpy  
 >>> numpy.__version__  
 '1.9.2'  
 复杂点的例子：
 [python] view plain copy 在CODE上查看代码片派生到我的代码片
 >>> import numpy as np          
 >>> from numpy.linalg import *  
 >>>   
 >>> a = np.array([[1.0, 2.0], [3.0, 4.0]])  
 >>> print a  
 [[ 1.  2.]  
  [ 3.  4.]]  
 >>> a.transpose()  
 array([[ 1.,  3.],  
        [ 2.,  4.]])  
 >>> inv(a)  
 array([[-2. ,  1. ],  
        [ 1.5, -0.5]])  
 可见，不依赖任何第三方计算库的NumPy确实是可以正常使用的。
 3. 不依赖第三方计算库对NumPy有何影响
 目前为止，虽然确实成功编译并能正常使用NumPy，但仔细查看编译过程输出的bld.log日志文件，可以发现这样一段提示：

 [plain] view plain copy 在CODE上查看代码片派生到我的代码片
 building extension "numpy.linalg.lapack_lite" sources  
 creating build/src.linux-x86_64-2.7/numpy/linalg  
 ### Warning:  Using unoptimized lapack ###  
   adding 'numpy/linalg/lapack_litemodule.c' to sources.  
   adding 'numpy/linalg/lapack_lite/python_xerbla.c' to sources.  
   adding 'numpy/linalg/lapack_lite/zlapack_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/dlapack_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/blas_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/dlamch.c' to sources.  
   adding 'numpy/linalg/lapack_lite/f2c_lite.c' to sources.  
 building extension "numpy.linalg._umath_linalg" sources  
 ### Warning:  Using unoptimized lapack ###  
   adding 'numpy/linalg/umath_linalg.c.src' to sources.  
   adding 'numpy/linalg/lapack_lite/python_xerbla.c' to sources.  
   adding 'numpy/linalg/lapack_lite/zlapack_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/dlapack_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/blas_lite.c' to sources.  
   adding 'numpy/linalg/lapack_lite/dlamch.c' to sources.  
   adding 'numpy/linalg/lapack_lite/f2c_lite.c' to sources.  
 conv_template:> build/src.linux-x86_64-2.7/numpy/linalg/umath_linalg.c  
 其中，"Warning:  Using unoptimized lapack"表明编译numpy相关的线性代数库(linalg)时，所依赖的lapack函数库是NumPy源码自带的一份未经优化的实现。
 几点说明如下：
 1) 查看numpy-1.9.2/numpy/linalg目录下的源码可看到，lapack_litemodule.c文件是NumPy为Python实现的C语言扩展库的“接口”文件，该文件定义了一系列Python与C交互的接口函数。写过Python C扩展的话，应该很容易就能看出来，这里不赘
 2) linalg/lapack_lite目录下的几个C文件是NumPy自带的未经优化的线性代数算法的实现文件
 3) 安装前将BLAS/LAPACK/ATLAS几个环境变量export为None后，NumPy的setup脚本就不会尝试在其它路径下搜索这几个库的优化版本，此时，编译脚本会用自带的linalg/lapack_lite目录下的未优化实现编译出动态库lapack_lite.so供上层的Python应用程序调用
 总之，NumPy是否依赖lapack和atlas库，主要影响的是其性能，其功能不受影响。
 另外，在实际开发环境中，用到Numpy的地方通常也会用到SciPy，而SciPy是必须依赖lapack和atlas库的，所以，实际项目中使用的NumPy库通常会依赖lapack和atlas。
 而从源码编译依赖lapack和atlas库的numpy库通常需要一些注意事项，下篇笔记将会给出说明。
 【参考资料】
 1. NumPy官网 
 2. LAPACK官网
 3. ATLAS官网 
 4. BLAS官网 
 5. StackOverflow - What is the relation between BLAS, LAPACK and ATLAS  
 6. Building and installing NumPy  
 7. SciPy.org - Building From Source on Linux 

 ====================== EOF ======================



#if 1

#if 1
#endif


#endif



#if 1 numpy源码包中的安装指导INSTALL.txt
.. -*- rest -*-
.. vim:syntax=rest
.. NB! Keep this document a valid restructured document.

Building and installing NumPy
+++++++++++++++++++++++++++++

:Authors: Numpy Developers <numpy-discussion@scipy.org>
:Discussions to: numpy-discussion@scipy.org

**IMPORTANT**: the below notes are about building Numpy, which for most users
is *not* the recommended way to install Numpy.  Instead, use either a complete
scientific Python distribution or a binary installer - see
http://scipy.org/install.html.


.. Contents::

PREREQUISITES
=============

Building NumPy requires the following software installed:

1) For Python 2, Python__ 2.6.x or newer.
   For Python 3, Python__ 3.2.x or newer.

   On Debian and derivative (Ubuntu): python python-dev

   On Windows: the official python installer on Python__ is enough

   Make sure that the Python package distutils is installed before
   continuing. For example, in Debian GNU/Linux, distutils is included
   in the python-dev package.

   Python must also be compiled with the zlib module enabled.

2) nose__ (optional) 1.0 or later

   This is required for testing numpy, but not for using it.

Python__ http://www.python.org
nose__ http://somethingaboutorange.com/mrl/projects/nose/

Basic Installation
==================

To install numpy run:

    python setup.py build -j 4 install --prefix $HOME/.local

This will compile numpy on 4 CPUs and install it into the specified prefix.
To perform an inplace build that can be run from the source folder run:

   python setup.py build_ext --inplace -j 4

The number of build jobs can also be specified via the environment variable
NPY_NUM_BUILD_JOBS.

Fortran ABI mismatch
====================

The two most popular open source fortran compilers are g77 and gfortran.
Unfortunately, they are not ABI compatible, which means that concretely you
should avoid mixing libraries built with one with another. In particular,
if your blas/lapack/atlas is built with g77, you *must* use g77 when
building numpy and scipy; on the contrary, if your atlas is built with
gfortran, you *must* build numpy/scipy with gfortran.

Choosing the fortran compiler
-----------------------------

To build with g77:

    python setup.py build --fcompiler=gnu

To build with gfortran:

    python setup.py build --fcompiler=gnu95

How to check the ABI of blas/lapack/atlas
-----------------------------------------

One relatively simple and reliable way to check for the compiler used to
build a library is to use ldd on the library. If libg2c.so is a dependency,
this means that g77 has been used. If libgfortran.so is a dependency,
gfortran has been used. If both are dependencies, this means both have been
used, which is almost always a very bad idea.

Building with optimized BLAS support
====================================

Ubuntu/Debian
-------------

In order to build with optimized a BLAS providing development package must be installed.
Options are for example:

 - libblas-dev
   reference BLAS not very optimized
 - libatlas-base-dev
   generic tuned ATLAS, it is recommended to tune it to the available hardware,
   see /usr/share/doc/libatlas3-base/README.Debian for instructions
 - libopenblas-base
   fast and runtime detected so no tuning required but as of version 2.11 still
   suffers from correctness issues on some CPUs, test your applications
   thoughly.

The actual implementation can be exchanged also after installation via the
alternatives mechanism:

   update-alternatives --config libblas.so.3
   update-alternatives --config liblapack.so.3

Or by preloading a specific BLAS library with
    LD_PRELOAD=/usr/lib/atlas-base/atlas/libblas.so.3 python ...


Windows 32 bits notes
=====================

The MinGW compilers used to build the official Numpy binary installers for
32-bit Python on Windows can be found in https://github.com/numpy/numpy-vendor.
That repo also contains pre-built ATLAS binarues.  The command to build and
install Numpy is:

   $ python setup.py config --compiler=mingw32 build --compiler=mingw32 install

Typically, one needs to use a site.cfg file that looks like:

   [atlas]
   library_dirs = C:\local\lib\atlas
   include_dirs = C:\local\lib\atlas

Windows 64 bits notes
=====================

Note: only AMD64 is supported (IA64 is not) - AMD64 is the version most
people want.

Free compilers (mingw-w64)
--------------------------

http://mingw-w64.sourceforge.net/

To use the free compilers (mingw-w64), you need to build your own
toolchain, as the mingw project only distribute cross-compilers
(cross-compilation is not supported by numpy). Since this toolchain is
still being worked on, serious compiler bugs can be expected.  binutil 2.19
+ gcc 4.3.3 + mingw-w64 runtime gives you a working C compiler (but the C++
is broken). gcc 4.4 will hopefully be able to run natively.

This is the only tested way to get a numpy with a FULL blas/lapack (scipy
does not work because of C++).

Carl Kleffner's mingw-w64 toolchain
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Carl Kleffner has been working on mingw-w64 / OpenBLAS support and has put
together toolchains for that option. The toolchains are available at 
https://bitbucket.org/carlkl/mingw-w64-for-python/downloads. The site.cfg
should be configured like so:

   [openblas]
   libraries = openblaspy
   library_dirs = <openblaspath>/lib
   include_dirs = <openblaspath>/include

The libopenblaspy.dll from <openblaspath>/bin must be copied to numpy/core
before the build. For this mingw-w64 toolchain manual creation of the python
import libs is necessary, i.e.:

   gendef python2.7.dll
   dlltool -D python27.dll -d python27.def -l libpython27.dll.a
   move libpython27.dll.a libs\libpython27.dll.a

For python-2.6 up to python 3.2 use
https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy_win32_vc90.tar.xz
or
https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy_amd64_vc90.tar.xz

For python-3.3 and python-3.4 use
https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy_win32_vc100.tar.xz
or
https://bitbucket.org/carlkl/mingw-w64-for-python/downloads/mingwpy_amd64_vc100.tar.xz
 

MS compilers
------------

If you are familiar with MS tools, that's obviously the easiest path, and
the compilers are hopefully more mature (although in my experience, they
are quite fragile, and often segfault on invalid C code). The main drawback
is that mingw-w64 gfortran + MSVC does not work at all (it is unclear
whether it ever will).  MSVC + ifort + MKL does work.

For python 2.6, you need VS 2008. The freely available version does not
contains 64 bits compilers (you also need the PSDK, v6.1).

It is crucial to use the right MS compiler version. For python 2.6, you
must use version 15. You can check the compiler version with cl.exe /?.
#endif