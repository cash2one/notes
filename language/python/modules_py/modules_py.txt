----> modules
import module_name # 导入模块

the code in the module is executed when you import it. However, if you try to  import 
it again, nothing happens. Because modules aren’t really meant to do things (such  as
printing text) when they’re imported. They are mostly meant to define things, such as 
variables, functions, classes, and so on. And because you need to define things  only 
once, importing a module several times has the same effect as importing it once.

When you import a module, you may notice that a new file appears. The file with the -
.pyc extension is a (platform-independent) processed (“compiled”) Python file that h-
as been translated to a format that Python can handle more efficiently. If you import 
the same module later, Python will import the .pyc file rather than the .py file, un-
less the .py file has changed; in that case, a new .pyc file is generated. Deleting -
the .pyc file does no harm (as long as there is an equivalent .py file available),  -
a new one is created when needed.

----------------------------------------
# hello4.py
def hello():
    print "Hello, world!"
def test():
    hello()
if __name__ == '__main__': test()
---------------------------------------
>>> import sys, pprint
>>> sys.path.append('c:/python')
>>> pprint.pprint(sys.path)
['C:\\Python25\\Lib\\idlelib',
'C:\\WINDOWS\\system32\\python25.zip',
'C:\\Python25',
'C:\\Python25\\DLLs',
'C:\\Python25\\lib',
'C:\\Python25\\lib\\plat-win',
'C:\\Python25\\lib\\lib-tk',
'C:\\Python25\\lib\\site-packages']
---------------------------------------

export PYTHONPATH=$PYTHONPATH:~/python  # linux
set PYTHONPATH=%PYTHONPATH%;C:\python   # windows

----> Packages
To structure your modules, you can group them into packages. A package is basically -
just another type of module. The interesting thing about them is that they can conta-
in other modules. While a module is stored in a file (with the file name extension  -
.py), a package is a directory. To make Python treat it as a package, it must contain 
a file (module) named __init__.py. The contents of this file will be the contents  of 
the package, if you import it as if it were a plain module.  For example, if you wan-
ted a package called drawing, which contained one module called shapes and one called 
colors, you would need the files and directories (UNIX pathnames)
~/python/                               # Directory in PYTHONPATH
~/python/drawing/                       # Package directory (drawing package)
~/python/drawing/__init__.py            # Package code (drawing module)
~/python/drawing/colors.py              # colors module
~/python/drawing/shapes.py              # shapes module
With this setup, the following statements are all legal:
import drawing              # (1) Imports the drawing package
import drawing.colors       # (2) Imports the colors module
from drawing import shapes  # (3) Imports the shapes module
After the first statement, the contents of the __init__ module in drawing would be a-
vailable; the shapes and colors modules, however, would not be. After the second sta-
tement, the colors module would be available, but only under its full name,         -
drawing.colors. After the third statement, the shapes module would be available, und-
er its short name (that is, simply shapes). Note that these statements are just exam-
ples. There is no need, for example, to import the package itself before importing o-
ne of its modules as I have done here. The second statement could very well be execu-
ted on its own, as could the third. You may nest packages inside each other.

----> Exploring Modules
>>> import copy
>>> [n for n in dir(copy) if not n.startswith('_')]
['Error', 'PyStringMap', 'copy', 'deepcopy', 'dispatch_table', 'error', 'name', 't']

>>> copy.__all__
['Error', 'copy', 'deepcopy']
__all__ defines the public interface of the module. More specifically, it tells the -
interpreter what it means to import all the names from this module. So if you use th-
is:
from copy import *
you get only the four functions listed in the __all__ variable. 

>>> help(copy.copy)

>>> print copy.copy.__doc__

>>> print copy.__file__    # C:\Python24\lib\copy.py

pym: python modules





tldextract
https://github.com/john-kurkowski/tldextract
https://pypi.python.org/pypi/tldextract




