#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->          1 定义函数           <--<--<--<--<--<--<-#
#******************************************************************************# 
#在Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号中的参数和冒号
#:，然后，在缩进块中编写函数体，函数的返回值用return语句返回。例如:
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
#遇到return时，函数就执行完毕，并将结果返回。
#如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。
#return None可以简写为return。

########空函数
#如果想定义一个什么事也不做的空函数，可以用pass语句：
def nop():
    pass
#pass语句什么都不做，可以用来作为占位符，比如现在还没想
#好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。

#pass还可以用在其他语句里，比如：
if age >= 18:
    pass
#缺少了pass，代码运行就会有语法错误。

########参数检查
#调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
>>> my_abs(1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: my_abs() takes exactly 1 argument (2 given)
#但是如果参数类型不对，Python解释器就无法帮我们检查。
#数据类型检查可以用内置函数isinstance实现：
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
#添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in my_abs
TypeError: bad operand type

########返回多个值
#函数可以返回多个值吗？答案是肯定的。
#比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算
#出新的新的坐标：

import math

def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny
#这样我们就可以同时获得返回值：

>>> x, y = move(100, 100, 60, math.pi / 6)
>>> print x, y
151.961524227 70.0

#但其实这只是一种假象，Python函数返回的仍然是单一值：

>>> r = move(100, 100, 60, math.pi / 6)
>>> print r
(151.96152422706632, 70.0)
#原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量
#可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是
#返回一个tuple，但写起来更方便。
#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->          2 函数的参数         <--<--<--<--<--<--<-#
#******************************************************************************#
#定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函
#数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，
#函数内部的复杂逻辑被封装起来，调用者无需了解。
#Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使
#用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，
#还可以简化调用者的代码。

########默认参数
#当我们调用power(5)时，相当于调用power(5, 2)：
def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
#默认参数可以简化函数的调用。设置默认参数时，有几点要注意：
#一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参
#数不能放在必选参数前面）；
#二是如何设置默认参数。
#当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可
#以作为默认参数。
def enroll(name, gender, age=6, city='Beijing'):
    print 'name:', name
    print 'gender:', gender
    print 'age:', age
    print 'city:', city
#有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用
enroll('Bob', 'M', 7)
#意思是，除了name，gender这两个参数外，最后1个参数应用在参数age上，city参数由于
#没有提供，仍然使用默认值。
#也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。
#比如调用
enroll('Adam', 'M', city='Tianjin')
#意思是，city参数用传进去的值，其他默认参数继续使用默认值。

####默认参数有个最大的坑，演示如下：
#先定义一个函数，传入一个list，添加一个END再返回：
def add_end(L=[]):
    L.append('END')
    return L
#当你正常调用时，结果似乎不错：
>>> add_end([1, 2, 3])
[1, 2, 3, 'END']
>>> add_end(['x', 'y', 'z'])
['x', 'y', 'z', 'END']
#当你使用默认参数调用时，一开始结果也是对的：
>>> add_end()
['END']
#但是，再次调用add_end()时，结果就不对了：
>>> add_end()
['END', 'END']
>>> add_end()
['END', 'END', 'END']
#很多初学者很疑惑，默认参数是[]，但是函数似乎每次都“记住了”上次添加了'END'后的
#list。

#原因解释如下：
#Python函数在定义的时候，默认参数L的值就被计算出来了，即[]，因为默认参数L也是一
#个变量，它指向对象[]，每次调用该函数，如果改变了L的内容，则下次调用时，默认参数
#的内容就变了，不再是函数定义时的[]了。

#所以，定义默认参数要牢记一点：默认参数必须指向不变对象！
#要修改上面的例子，我们可以用None这个不变对象来实现：
def add_end(L=None):
    if L is None:
        L = []
    L.append('END')
    return L
#现在，无论调用多少次，都不会有问题：
>>> add_end()
['END']
>>> add_end()
['END']
#为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不
#能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同
#时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个
#不变对象，那就尽量设计成不变对象。

####可变参数
#给定一组数字a，b，c……，请计算a^2 + b^2 + c^2 + ……。
def calc(*numbers):
    sum = 0
    for n in numbers:
        sum = sum + n * n
    return sum
#参数前面加了一个*号。在函数内部，参数numbers接收到的是一个tuple
#调用该函数时，可以传入任意个参数，包括0个参数：
>>> calc(1, 2)
5
>>> calc()
0	
>>> nums = [1, 2, 3]
>>> calc(*nums)
14

######## 关键字参数
#可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。
#而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组
#装为一个dict。请看示例：
def person(name, age, **kw):
    print 'name:', name, 'age:', age, 'other:', kw
#函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传
#入必选参数：
>>> person('Michael', 30)
name: Michael age: 30 other: {}
#也可以传入任意个数的关键字参数：
>>> person('Bob', 35, city='Beijing')
name: Bob age: 35 other: {'city': 'Beijing'}
>>> person('Adam', 45, gender='M', job='Engineer')
name: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}
#关键字参数有什么用？它可以扩展函数的功能。比如，在person函数里，我们保证能接收
#到name和age这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想
#你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关
#键字参数来定义这个函数就能满足注册的需求。

#和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：
>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, city=kw['city'], job=kw['job'])
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}
#当然，上面复杂的调用可以用简化的写法：
>>> kw = {'city': 'Beijing', 'job': 'Engineer'}
>>> person('Jack', 24, **kw)
name: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}

######## 参数组合

#在Python中定义函数，可以用必选参数、默认参数、可变参数和关键字参数，这4种参数都
#可以一起使用，或者只用其中某些，但是请注意，参数定义的顺序必须是：必选参数、默
#认参数、可变参数和关键字参数。

#比如定义一个函数，包含上述4种参数：

def func(a, b, c=0, *args, **kw):
    print 'a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw
#在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。
>>> func(1, 2)
a = 1 b = 2 c = 0 args = () kw = {}
>>> func(1, 2, c=3)
a = 1 b = 2 c = 3 args = () kw = {}
>>> func(1, 2, 3, 'a', 'b')
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {}
>>> func(1, 2, 3, 'a', 'b', x=99)
a = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}
#最神奇的是通过一个tuple和dict，你也可以调用该函数：
>>> args = (1, 2, 3, 4)
>>> kw = {'x': 99}
>>> func(*args, **kw)
a = 1 b = 2 c = 3 args = (4,) kw = {'x': 99}
#所以，对于任意函数，都可以通过类似func(*args, **kw)的形式调用它，无论它的参数是
#如何定义的。

#参数使用小结
#Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的
#参数。
#默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误！
#要注意定义可变参数和关键字参数的语法：
#*args是可变参数，args接收的是一个tuple；
#**kw是关键字参数，kw接收的是一个dict。
#以及调用函数时如何传入可变参数和关键字参数的语法：
#可变参数既可以直接传入：func(1, 2, 3)，又可以先组装list或tuple，再通过*args传入
#：func(*(1, 2, 3))；
#关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装dict，再通过**kw传入：
#func(**{'a': 1, 'b': 2})。
#使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。

#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->          3 递归函数           <--<--<--<--<--<--<-#
#******************************************************************************#
#在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归
#函数。

#举个例子，我们来计算阶乘n! = 1 x 2 x 3 x ... x n，用函数fact(n)表示，可以看出：
#fact(n) = n! = 1 x 2 x 3 x ... x (n-1) x n = (n-1)! x n = fact(n-1) x n
#所以，fact(n)可以表示为n x fact(n-1)，只有n=1时需要特殊处理。
#于是，fact(n)用递归的方式写出来就是：

def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)
#上面就是一个递归函数。可以试试：

>>> fact(1)
1
>>> fact(5)
120
>>> fact(100)

#===> fact(5)
#===> 5 * fact(4)
#===> 5 * (4 * fact(3))
#===> 5 * (4 * (3 * fact(2)))
#===> 5 * (4 * (3 * (2 * fact(1))))
#===> 5 * (4 * (3 * (2 * 1)))
#===> 5 * (4 * (3 * 2))
#===> 5 * (4 * 6)
#===> 5 * 24
#===> 120
#递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，
#但循环的逻辑不如递归清晰。

#使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结
#构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈
#帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试
#fact(1000)：
>>> fact(1000)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 4, in fact
  ...
  File "<stdin>", line 4, in fact
RuntimeError: maximum recursion depth exceeded
#解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所
#以，把循环看成是一种特殊的尾递归函数也是可以的。

#尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这
#样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一
#个栈帧，不会出现栈溢出的情况。

#上面的fact(n)函数由于return n * fact(n - 1)引入了乘法表达式，所以就不是尾递归了。
#要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：

def fact(n):
    return fact_iter(1, 1, n)

def fact_iter(product, count, max):
    if count > max:
        return product
    return fact_iter(product * count, count + 1, max)
#可以看到，return fact_iter(product * count, count + 1, max)仅返回递归函数本身，
#product * count和count + 1在函数调用前就会被计算，不影响函数调用。

#fact(5)对应的fact_iter(1, 1, 5)的调用如下：

#===> fact_iter(1, 1, 5)
#===> fact_iter(1, 2, 5)
#===> fact_iter(2, 3, 5)
#===> fact_iter(6, 4, 5)
#===> fact_iter(24, 5, 5)
#===> fact_iter(120, 6, 5)
#===> 120
#尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。

#遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，
#即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。

#有一个针对尾递归优化的decorator，可以参考源码：

#http://code.activestate.com/recipes/474088-tail-call-optimization-decorator/

#我们后面会讲到如何编写decorator。现在，只需要使用这个@tail_call_optimized，就可
#以顺利计算出fact(1000)：

