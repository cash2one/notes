#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->            1 切片             <--<--<--<--<--<--<-#
#******************************************************************************#
#取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：
>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
#取前3个元素，应该怎么做？
>>> [L[0], L[1], L[2]]
['Michael', 'Sarah', 'Tracy']

#取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：
>>> r = []
>>> n = 3
>>> for i in range(n):
...     r.append(L[i])
... 
>>> r
['Michael', 'Sarah', 'Tracy']
#对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）
#操作符，能大大简化这种操作。

#对应上面的问题，取前3个元素，用一行代码就可以完成切片：
>>> L[0:3]
['Michael', 'Sarah', 'Tracy']
#L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是
#3个元素。如果第一个索引是0，还可以省略：
>>> L[:3]
['Michael', 'Sarah', 'Tracy']
#也可以从索引1开始，取出2个元素出来：
>>> L[1:3]
['Sarah', 'Tracy']
#类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片，试试：
>>> L[-2:]
['Bob', 'Jack']
>>> L[-2:-1]
['Bob']
#记住倒数第一个元素的索引是-1。

#切片操作十分有用。我们先创建一个0-99的数列：
>>> L = range(100)
>>> L
[0, 1, 2, 3, ..., 99]
#可以通过切片轻松取出某一段数列。比如前10个数：

>>> L[:10]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
#后10个数：
>>> L[-10:]
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
#前11-20个数：
>>> L[10:20]
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
#前10个数，每两个取一个：
>>> L[:10:2]
[0, 2, 4, 6, 8]
#所有数，每5个取一个：
>>> L[::5]
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
#甚至什么都不写，只写[:]就可以原样复制一个list：
>>> L[:]
[0, 1, 2, 3, ..., 99]
#tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操
#作的结果仍是tuple：
>>> (0, 1, 2, 3, 4, 5)[:3]
(0, 1, 2)
#字符串'xxx'或Unicode字符串u'xxx'也可以看成是一种list，每个元素就是一个字符。因
#此，字符串也可以用切片操作，只是操作结果仍是字符串：
>>> 'ABCDEFG'[:3]
'ABC'
>>> 'ABCDEFG'[::2]
'ACEG'
#在很多编程语言中，针对字符串提供了很多各种截取函数，其实目的就是对字符串切片。
#Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。

#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->            2 迭代             <--<--<--<--<--<--<-#
#******************************************************************************#
#如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们
#成为迭代（Iteration）。

在#Python中，迭代是通过for ... in来完成的，而很多语言比如C或者Java，迭代list是通
#过下标完成的，比如Java代码：
for (i=0; i<list.length; i++) {
    n = list[i];
}
#可以看出，Python的for循环抽象程度要高于Java的for循环，因为Python的for循环不仅可
#以用在list或tuple上，还可以作用在其他可迭代对象上。

#list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代
#对象，无论有无下标，都可以迭代，比如dict就可以迭代：
>>> d = {'a': 1, 'b': 2, 'c': 3}
>>> for key in d:
...     print key
...
a
c
b
#因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。

#默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.itervalues()
#如果要同时迭代key和value，可以用for k, v in d.iteritems()。

#由于字符串也是可迭代对象，因此，也可以作用于for循环：

>>> for ch in 'ABC':
...     print ch
...
A
B
C
#所以，当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而
#我们不太关心该对象究竟是list还是其他数据类型。

#那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型
#判断：

>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False
#最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的
#enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引
#和元素本身：
>>> for i, value in enumerate(['A', 'B', 'C']):
...     print i, value
...
0 A
1 B
2 C
#上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：

>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
...     print x, y
...
1 1
2 4
3 9
#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->         3 列表生成式          <--<--<--<--<--<--<-#
#******************************************************************************#
#列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list
#的生成式。

#举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用range(1, 11)：
>>> range(1, 11)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#但如果要生成[1x1, 2x2, 3x3, ..., 10x10]怎么做？方法一是循环：
>>> L = []
>>> for x in range(1, 11):
...    L.append(x * x)
...
>>> L
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：
>>> [x * x for x in range(1, 11)]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
#写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出
#来，十分有用，多写几次，很快就可以熟悉这种语法。

#for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：

>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]
#还可以使用两层循环，可以生成全排列：

>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
#三层和三层以上的循环就很少用到了。
#运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录
#名，可以通过一行代码实现：
>>> import os # 导入os模块
>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
['.emacs.d', '.ssh', '.Trash', 'Adlm', 'Applications', 'Desktop', 'Documents', 'Downloads', 'Library', 'Movies', 'Music', 'Pictures', 'Public', 'VirtualBox VMs', 'Workspace', 'XCode']
#for循环其实可以同时使用两个甚至多个变量，比如dict的iteritems()可以同时迭代key
#和value：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> for k, v in d.iteritems():
...     print k, '=', v
... 
y = B
x = A
z = C
#因此，列表生成式也可以使用两个变量来生成list：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.iteritems()]
['y=B', 'x=A', 'z=C']
#最后把一个list中所有的字符串变成小写：
>>> L = ['Hello', 'World', 'IBM', 'Apple']
>>> [s.lower() for s in L]
['hello', 'world', 'ibm', 'apple']
#小结
#运用列表生成式，可以快速生成list，可以通过一个list推导出另一个list，而代码却十
#分简洁。

#如果list中既包含字符串，又包含整数，由于非字符串类型没有lower()方法，所以列表
#生成式会报错：

>>> L = ['Hello', 'World', 18, 'Apple', None]
>>> [s.lower() for s in L]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'int' object has no attribute 'lower'
#使用内建的isinstance函数可以判断一个变量是不是字符串：

>>> x = 'abc'
>>> y = 123
>>> isinstance(x, str)
True
>>> isinstance(y, str)
False
#通过添加if语句保证列表生成式能正确地执行。

#******************************************************************************# 
#-->-->-->-->-->-->-->-->-->           3 生成器            <--<--<--<--<--<--<-#
#******************************************************************************#
#通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有
#限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅
#需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

#所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推
#算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这
#种一边循环一边计算的机制，称为生成器（Generator）。

#要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改
#成()，就创建了一个generator：

>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x104feab40>
#创建L和g的区别仅在于最外层的[]和()，L是一个list，而g是一个generator。

#我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？

#如果要一个一个打印出来，可以通过generator的next()方法：

>>> g.next()
0
>>> g.next()
1
>>> g.next()
4
>>> g.next()
9
>>> g.next()
16
>>> g.next()
25
>>> g.next()
36
>>> g.next()
49
>>> g.next()
64
>>> g.next()
81
>>> g.next()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
#我们讲过，generator保存的是算法，每次调用next()，就计算出下一个元素的值，直到计
#算到最后一个元素，没有更多的元素时，抛出StopIteration的错误。

#当然，上面这种不断调用next()方法实在是太变态了，正确的方法是使用for循环，因为
#generator也是可迭代对象：

>>> g = (x * x for x in range(10))
>>> for n in g:
...     print n
...
0
1
4
9
16
25
36
49
64
81
#所以，我们创建了一个generator后，基本上永远不会调用next()方法，而是通过for循环
#来迭代它。

#generator非常强大。如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的
#时候，还可以用函数来实现。

#比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由
#前两个数相加得到：

1, 1, 2, 3, 5, 8, 13, 21, 34, ...

#斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        print b
        a, b = b, a + b
        n = n + 1
#上面的函数可以输出斐波那契数列的前N个数：
>>> fib(6)
1
1
2
3
5
8
#仔细观察，可以看出，fib函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元
#素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。

#也就是说，上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把
#print b改为yield b就可以了：

def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
#这就是定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函
#数就不再是一个普通函数，而是一个generator：

>>> fib(6)
<generator object fib at 0x104feaaa0>
#这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到
#return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()
#的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

#举个简单的例子，定义一个generator，依次返回数字1，3，5：

>>> def odd():
...     print 'step 1'
...     yield 1
...     print 'step 2'
...     yield 3
...     print 'step 3'
...     yield 5
...
>>> o = odd()
>>> o.next()
step 1
1
>>> o.next()
step 2
3
>>> o.next()
step 3
5
>>> o.next()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
#可以看到，odd不是普通函数，而是generator，在执行过程中，遇到yield就中断，下次又
#继续执行。执行3次yield后，已经没有yield可以执行了，所以，第4次调用next()就报错。

#回到fib的例子，我们在循环过程中不断调用yield，就会不断中断。当然要给循环设置一
#个条件来退出循环，不然就会产生一个无限数列出来。

#同样的，把函数改成generator后，我们基本上从来不会用next()来调用它，而是直接使
#用for循环来迭代：

>>> for n in fib(6):
...     print n
...
1
1
2
3
5
8

#generator是非常强大的工具，在Python中，可以简单地把列表生成式改成generator，也
#可以通过函数实现复杂逻辑的generator。
#要理解generator的工作原理，它是在for循环的过程中不断计算出下一个元素，并在适当
#的条件结束for循环。对于函数改成的generator来说，遇到return语句或者执行到函数体
#最后一行语句，就是结束generator的指令，for循环随之结束。
