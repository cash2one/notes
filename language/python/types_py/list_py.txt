----> Sequence Overview
Python has six built-in types of sequences: lists, tuples strings, Unicode strings, -
buffer objects, and xrange objects. 

Python has a basic notion of a kind of data structure called a container, which is b-
asically any object that can contain other objects. The two main kinds of  containers 
are sequences (such as lists and tuples) and mappings (such as dictionaries). While -
the elements of a sequence are numbered, each element in a mapping has a name (also -
called a key). 

----> Common Sequence Operations
1 Indexing
All elements in a sequence are numbered -- from zero and upwards. When you use a neg-
ative index, Python counts from the right; that is, from the last element. The last -
element is at position ¨C1. [first, last)
>>> greeting = 'Hello'
>>> greeting[0]
'H'
>>> greeting[-1]
'o'

2 Adding Sequences
Sequences can be concatenated with the addition (plus) operator. In general, you can-
not concatenate sequences of different types.
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> 'Hello, ' + 'world!'
'Hello, world!'
>>> [1, 2, 3] + 'world!'
Traceback (innermost last):
File "<pyshell#2>", line 1, in ?
[1, 2, 3] + 'world!'
TypeError: can only concatenate list (not "string") to list

3 Slicing
you can use slicing to access ranges of elements. You do this by using two indices, -
separated by a colon. The first index is the number of the first element you want  to 
include. However, the last index is the number of the first element after your slice.
>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> numbers[3:6]
[4, 5, 6]
>>> numbers[0:1]
[1]

the leftmost index in a slice comes later in the sequence than the second one, the r-
esult is always an empty sequence.
>>> numbers[-3:0]
[]

if the slice continues to the end of the sequence, you may simply leave out the  last 
index:
>>> numbers[-3:]
[8, 9, 10]
The same thing works from the beginning:
>>> numbers[:3]
[1, 2, 3]

if you want to copy the entire sequence, you may leave out both indices:
>>> numbers[:]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

In a regular slice, the step length is one, which means that the slice ¡°moves¡± from -
one element to the next, returning all the elements between the start and end:
>>> numbers[0:10:1]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
If the step size is set to a number greater than one, elements will be skipped. For -
example,
>>> numbers[0:10:2]
[1, 3, 5, 7, 9]
>>> numbers[::4]
[1, 5, 9]
for a positive step size, it moves from the beginning toward the end, and for a nega-
tive step size, it moves from the end toward the beginning.
>>> numbers[8:3:-1]
[9, 8, 7, 6, 5]
>>> numbers[10:0:-2]
[10, 8, 6, 4, 2]
>>> numbers[0:10:-2]
[]
>>> numbers[::-2]
[10, 8, 6, 4, 2]
>>> numbers[5::-2]
[6, 4, 2]
>>> numbers[:5:-2]
[10, 8]




	
