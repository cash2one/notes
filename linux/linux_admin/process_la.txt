C语言格式
http://www.cnblogs.com/bangerlee/archive/2012/03/30/2412652.html   Linux进程托管与守护进程设置
http://www.netzmafia.de/skripten/unix/linux-daemon-howto.html   Linux Daemon Writing HOWTO



                                                                                     |
#if 1 /* Linux进程托管与守护进程设置 */ 
Linux进程托管与守护进程设置


在上一篇《Linux启动之旅》中，我们了解了Linux启动过程，在该过程的最后一步，init进程拉起/etc/init.d/rcN.d/目录下指定的守护进程(daemon)。假若自定义的一个进程也需要随开机自启动，并随系统一直运行，我们可以怎么设置呢？

 

利用init进行进程托管

系统启动时，init程序根据/etc/inittab文件的配置，拉起系统服务、getty登陆终端，自定义的进程同样也可交由init程序管理。

最简单的方法，是在/etc/inittab文件中添加一条语句：

zz:2345:respawn:/tmp/lx/test_init
该语句含义为：

id: inittab文件中条目的唯一标识，这里为zz

runlevels: 列出指定命令或进程的运行级，这里指示/tmp/lx/test_init程序在2、3、4和5级别运行

action: 描述init对进程进行何种方式托管，respawn指该进程只要中止就立即重新启动

process: 要执行的进程，这里为/tmp/lx/test_init

 

对/etc/inittab文件修改过后，我们可发送HUP信号量给init进程，让修改生效：

＃kill  -HUP  1
以上命令执行完之后，就可以查到我们自定义的程序咯：

SER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root      3783  0.0  0.0   3832   600 ?        Ss   Mar27   0:00 /tmp/lx/test_init
 

init是否能像我们设定的那样对自定义进程进行管理呢？kill掉以上进程再检验一下吧！

 

这种设定自启动、长久执行进程的方式十分简单，所要做的就是把程序准备好，再在/etc/inittab文件里添加一条语句即可。但是，如果要把进程停掉，我们需要这么做：修改/etc/inittab文件，在对应条目开头加上注释，然后发送SIGHUP信号让init进程重新加载/etc/inittab配置文件。

 

这时，在一旁扫地的阿姨瞄了一眼屏幕，不经意地说：停止进程就这么不方便，假如我还要重启进程、查询进程状态、修改进程运行级别呢？

 

守护进程设置

为更方便地对自定义进程进行起停、查询等操作，我们可将自定义进程设置为守护进程，并利用service等工具进行进程管理工作。下面我们来看守护进程的设置方法。

 

首先，和系统自带的守护进程一样，在/etc/init.d目录下需要有一个与自定义守护进程相对应的脚本文件(init script)，该脚本包含以下内容。

说明信息(INIT INFO):

复制代码
# /etc/init.d/test_daemon
### BEGIN INIT INFO
# Provides:           test_daemon
# Required-Start:     $local_fs 
# Should-Start: 
# Required-Stop: 
# Should-Stop: 
# Default-Start:      2 3 5
# Default-Stop:       0 1 2 6
# Description:        test_daemon writes a message to /tmp/lx/test.log every 10 seconds,
#                     showing that the daemon is alive.
### END INIT INFO
复制代码
守护进程的说明信息格式固定，其指明守护进程依赖的服务、启动/关闭的运行级别等信息。

 

进程开启(start)、退出(stop)、状态查询(status)等动作对应的脚本：

复制代码
TEST_BIN=/usr/sbin/test_daemon
case "$1" in
start)
echo -n "Starting test_daemon "
/sbin/startproc $TEST_BIN
rc_status -v
;;
stop)
echo -n "Shutting down test_daemon "
/sbin/killproc -TERM $TEST_BIN
rc_status -v
;;
复制代码
以上脚本调用了startproc、killproc工具对守护进程的起停进行控制。

 

最后，正确设置脚本权限，并使用insserv工具生成/etc/init.d/rcN.d目录下相应链接：

#chmod 744 /etc/init.d/test_daemon
#insserv /etc/init.d/test_daemon
 

insserv工具会根据守护进程init script中"INIT INFO"的依赖信息，决定系统启动时，自定义守护进程与已有守护进程的相对启动顺序：

#ll /etc/init.d/rc5.d/*test            # */
lrwxrwxrwx 1 root root 7 Mar 29 01:02 /etc/init.d/rc5.d/K01test_daemon -> ../test_daemon
lrwxrwxrwx 1 root root 7 Mar 29 01:02 /etc/init.d/rc5.d/S01test_daemon -> ../test_daemon
 

完成以上步骤，在系统重启后，进程test_daemon就会自动启动。我们可以使用命令对该进程进行起停：

复制代码
#/etc/init.d/test_daemon start
Starting test_daemon                   done
#/etc/init.d/test_daemon status
Checking for service test_daemon       running
#/etc/init.d/test_daemon stop
Shutting down test_daemon              done
复制代码
 

service工具可对/etc/init.d目录下的系统服务进行管理，也可以使用它完成与以上相同的操作：

#service test_daemon start
#service test_daemon status
#service test_daemon stop
 

另外，我们还可以使用chkconfig工具对test_daemon的启动级别进行查询和设定：

#chkconfig --list | grep test_daemon
test_daemon 0:off 1:off 2:on 3:on 4:off 5:on 6:off
#chkconfig test_daemon 35
#chkconfig --list | grep test
test 0:off 1:off 2:off 3:on 4:off 5:on 6:off
 

小结

本文介绍了两种添加自定义后台进程的方法。将进程交由init托管，当进程退出时可被init重新拉起，设置方法简单，但不方便对进程进行管理；以init script的方式将进程设置为系统服务项，利用系统已有的服务项管理工具service、chkconfig，能方便地对进程进行管理。

 

本文中使用的自定义进程代码和相关脚本可从这里下载。

 

---

本文基于Suse11sp1(x86_64)，该发行版可从这里下载。

#cat /etc/SuSE-release ;uname -r
SUSE Linux Enterprise Desktop 11 (x86_64)
VERSION = 11
PATCHLEVEL = 1
2.6.32.12-0.7-default
 

 

Reference:   Automatic startup of dsmcad daemon on system reboot on SUSE Linux

                    Creating a Persistent Daemon with init. Hack 4 in Chapter 1. Server Basics, Linux server hacks

                    Document /etc/init.d/README under Suse11sp1

                    Document /etc/init.d/skeleton under Suse11sp1

                    Linux Daemon Writing HOWTO                                             |
#endif


#if 2 /* Linux Daemon Writing HOWTO */
Linux Daemon Writing HOWTO

Devin Watson

v1.0, May 2004
This document shows how to write a daemon in Linux using GCC. Knowledge of Linux and a familiarity with C are necessary to use this document. This HOWTO is Copyright by Devin Watson, under the terms of the BSD License.
1. Introduction: What is a Daemon?

2. Getting Started

3. Planning Your Daemon

3.1 What Is It Going To Do?
3.2 How Much Interaction?
4. Basic Daemon Structure

4.1 Forking The Parent Process
4.2 Changing The File Mode Mask (Umask)
4.3 Opening Logs For Writing
4.4 Creating a Unique Session ID (SID)
4.5 Changing The Working Directory
4.6 Closing Standard File Descriptors
5. Writing the Daemon Code

5.1 Initialization
5.2 The Big Loop
6. Putting It All Together

6.1 Complete Sample
1. Introduction: What is a Daemon?

A daemon (or service) is a background process that is designed to run autonomously,with little or not user intervention. The Apache web server http daemon (httpd) is one such example of a daemon. It waits in the background listening on specific ports, and serves up pages or processes scripts, based on the type of request.

Creating a daemon in Linux uses a specific set of rules in a given order. Knowing how they work will help you understand how daemons operate in userland Linux, but can operate with calls to the kernel also. In fact, a few daemons interface with kernel modules that work with hardware devices, such as external controller boards, printers,and PDAs. They are one of the fundamental building blocks in Linux that give it incredible flexibility and power.

Throughout this HOWTO, a very simple daemon will be built in C. As we go along, more code will be added, showing the proper order of execution required to get a daemon up and running.

2. Getting Started

First off, you'll need the following packages installed on your Linux machine to develop daemons, specifically:

GCC 3.2.2 or higher
Linux Development headers and libraries
If your system does not already have these installed (not likely, but check anyway), you'll need them to develop the examples in this HOWTO. To find out what version of GCC you have installed, use:

         gcc --version
3. Planning Your Daemon

3.1 What Is It Going To Do?

A daemon should do one thing, and do it well. That one thing may be as complex as managing hundreds of mailboxes on multiple domains, or as simple as writing a report and calling sendmail to mail it out to an admin.

In any case, you should have a good plan going in what the daemon should do. If it is going to interoperate with some other daemons that you may or may not be writing, this is something else to consider as well.

3.2 How Much Interaction?

Daemons should never have direct communication with a user through a terminal. In fact, a daemon shouldn't communicate directly with a user at all. All communication should pass through some sort of interface (which you may or may not have to write), which can be as complex as a GTK+ GUI, or as simple as a signal set.

4. Basic Daemon Structure

When a daemon starts up, it has to do some low-level housework to get itself ready for its real job. This involves a few steps:

Fork off the parent process
Change file mode mask (umask)
Open any logs for writing
Create a unique Session ID (SID)
Change the current working directory to a safe place
Close standard file descriptors
Enter actual daemon code
4.1 Forking The Parent Process

A daemon is started either by the system itself or a user in a terminal or script. When it does start, the process is just like any other executable on the system. To make it truly autonomous, a child process must be created where the actual code is executed. This is known as forking, and it uses the fork() function:

         pid_t pid;

        /* Fork off the parent process */       
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }
Notice the error check right after the call to fork(). When writing a daemon, you will have to code as defensively as possible. In fact, a good percentage of the total code in a daemon consists of nothing but error checking.

The fork() function returns either the process id (PID) of the child process (not equal to zero), or -1 on failure. If the process cannot fork a child, then the daemon should terminate right here.

If the PID returned from fork() did succeed, the parent process must exit gracefully. This may seem strange to anyone who hasn't seen it, but by forking, the child process continues the execution from here on out in the code.

4.2 Changing The File Mode Mask (Umask)

In order to write to any files (including logs) created by the daemon, the file mode mask (umask) must be changed to ensure that they can be written to or read from properly. This is similar to running umask from the command line, but we do it programmatically here. We can use the umask() function to accomplish this:

         pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                /* Log failure (use syslog if possible) */
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }

        /* Change the file mode mask */
        umask(0);
        
By setting the umask to 0, we will have full access to the files generated by the daemon. Even if you aren't planning on using any files, it is a good idea to set the umask here anyway, just in case you will be accessing files on the filesystem.

4.3 Opening Logs For Writing

This part is optional, but it is recommended that you open a log file somewhere in the system for writing. This may be the only place you can look for debug information about your daemon.

4.4 Creating a Unique Session ID (SID)

From here, the child process must get a unique SID from the kernel in order to operate. Otherwise, the child process becomes an orphan in the system. The pid_t type, declared in the previous section, is also used to create a new SID for the child process:

         pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }
        
        /* Change the file mode mask */
        umask(0);
        
        /* Open any logs here */
        
        /* Create a new SID for the child process */
        sid = setsid();
        if (sid < 0) {
                /* Log any failure */
                exit(EXIT_FAILURE);
        }
Again, the setsid() function has the same return type as fork(). We can apply the same error-checking routine here to see if the function created the SID for the child process.

4.5 Changing The Working Directory

The current working directory should be changed to some place that is guaranteed to always be there. Since many Linux distributions do not completely follow the Linux Filesystem Hierarchy standard, the only directory that is guaranteed to be there is the root (/). We can do this using the chdir() function:

         pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }

        /* Change the file mode mask */
        umask(0);       
        
        /* Open any logs here */        
                
        /* Create a new SID for the child process */
        sid = setsid();
        if (sid < 0) {
                /* Log any failure here */
                exit(EXIT_FAILURE);
        }
        
        /* Change the current working directory */
        if ((chdir("/")) < 0) {
                /* Log any failure here */
                exit(EXIT_FAILURE);
        }
        
Once again, you can see the defensive coding taking place. The chdir() function returns -1 on failure, so be sure to check for that after changing to the root directory within the daemon.

4.6 Closing Standard File Descriptors

One of the last steps in setting up a daemon is closing out the standard file descriptors (STDIN, STDOUT, STDERR). Since a daemon cannot use the terminal, these file descriptors are redundant and a potential security hazard.

The close() function can handle this for us:

         pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }
        
        /* Change the file mode mask */
        umask(0);       
        
        /* Open any logs here */
        
        /* Create a new SID for the child process */
        sid = setsid();
        if (sid < 0) {
                /* Log any failure here */
                exit(EXIT_FAILURE);
        }
        
        /* Change the current working directory */
        if ((chdir("/")) < 0) {
                /* Log any failure here */
                exit(EXIT_FAILURE);
        }
        
        
        /* Close out the standard file descriptors */
        close(STDIN_FILENO);
        close(STDOUT_FILENO);
        close(STDERR_FILENO);
It's a good idea to stick with the constants defined for the file descriptors, for the greatest portability between system versions.

5. Writing the Daemon Code

5.1 Initialization

At this point, you have basically told Linux that you're a daemon, so now it's time to write the actual daemon code. Initialization is the first step here. Since there can be a multitude of different functions that can be called here to set up your daemon's task, I won't go too deep into here.

The big point here is that, when initializing anything in a daemon, the same defensive coding guidelines apply here. Be as verbose as possible when writing either to the syslog or your own logs. Debugging a daemon can be quite difficult when there isn't enough information available as to the status of the daemon.

5.2 The Big Loop

A daemon's main code is typically inside of an infinite loop. Technically, it isn't an infinite loop, but it is structured as one:

         pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }

        /* Change the file mode mask */
        umask(0);       
        
        /* Open any logs here */
        
        /* Create a new SID for the child process */
        sid = setsid();
        if (sid < 0) {
                /* Log any failures here */
                exit(EXIT_FAILURE);
        }
        
        
        /* Change the current working directory */
        if ((chdir("/")) < 0) {
                /* Log any failures here */
                exit(EXIT_FAILURE);
        }
        
        /* Close out the standard file descriptors */
        close(STDIN_FILENO);
        close(STDOUT_FILENO);
        close(STDERR_FILENO);
        
        /* Daemon-specific initialization goes here */
        
        /* The Big Loop */
        while (1) {
           /* Do some task here ... */
           sleep(30); /* wait 30 seconds */
        }
This typical loop is usually a while loop that has an infinite terminating condition, with a call to sleep in there to make it run at specified intervals.

Think of it like a heartbeat: when your heart beats, it performs a few tasks, then waits until the next beat takes place. Many daemons follow this same methodology.

6. Putting It All Together

6.1 Complete Sample

Listed below is a complete sample daemon that shows all of the steps necessary for setup and execution. To run this, simply compile using gcc, and start execution from the command line. To terminate, use the kill command after finding its PID.

I've also put in the correct include statements for interfacing with the syslog, which is recommended at the very least for sending start/stop/pause/die log statements, in addition to using your own logs with the fopen()/fwrite()/fclose() function calls.

 #include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <syslog.h>
#include <string.h>

int main(void) {
        
        /* Our process ID and Session ID */
        pid_t pid, sid;
        
        /* Fork off the parent process */
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }
        /* If we got a good PID, then
           we can exit the parent process. */
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }

        /* Change the file mode mask */
        umask(0);
                
        /* Open any logs here */        
                
        /* Create a new SID for the child process */
        sid = setsid();
        if (sid < 0) {
                /* Log the failure */
                exit(EXIT_FAILURE);
        }
        

        
        /* Change the current working directory */
        if ((chdir("/")) < 0) {
                /* Log the failure */
                exit(EXIT_FAILURE);
        }
        
        /* Close out the standard file descriptors */
        close(STDIN_FILENO);
        close(STDOUT_FILENO);
        close(STDERR_FILENO);
        
        /* Daemon-specific initialization goes here */
        
        /* The Big Loop */
        while (1) {
           /* Do some task here ... */
           
           sleep(30); /* wait 30 seconds */
        }
   exit(EXIT_SUCCESS);
}
From here, you can use this skeleton to write your own daemons. Be sure to add in your own logging (or use the syslog facility), and code defensively, code defensively, code defensively!
#endif
