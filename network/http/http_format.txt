/*                                                                                   |
http://www.cnblogs.com/li0803/archive/2008/11/03/1324746.html  HTTP协议详解


--> 传输机制
 HTTP/1.0和HTTP/1.1都把TCP作为底层的传输协议。HTTP客户首先发起建立与服务器TCP连接。一
 旦建立连接，浏览器进程和服务器进程就可以通过各自的套接字来访问TCP。如前所述，客户端套
 接字是客户进程和TCP连接之间的“门”，服务器端套接字是服务器进程和同一TCP连接之间的“门”。
 客户往自己的套接字发送HTTP请求消息，也从自己的套接字接收HTTP响应消息。类似地，服务器
 从自己的套接字接收HTTP请求消息，也往自己的套接字发送HTTP响应消息。客户或服务器一旦把
 某个消息送入各自的套接字，这个消息就完全落入TCP的控制之中。TCP给HTTP提供一个可靠的数
 据传输服务;这意味着由客户发出的每个HTTP请求消息最终将无损地到达服务器，由服务器发出的
 每个HTTP响应消息最终也将无损地到达客户。我们可从中看到分层网络体系结构的一个明显优势
 ——HTTP不必担心数据会丢失，也无需关心TCP如何从数据的丢失和错序中恢复出来的细节。这些是
 TCP和协议栈中更低协议层的任务。在向客户发送所请求文件的同时，服务器并没有存储关于该客
 户的任何状态信息。即便某个客户在几秒钟内再次请求同一个对象，服务器也不会响应说:自己刚
 刚给它发送了这个对象。相反，服务器重新发送这个对象，因为它已经彻底忘记早先做过什么。既
 然HTTP服务器不维护客户的状态信息，我们于是说HTTP是一个无状态的协议(stateless protocol)。

 HTTP既可以使用非持久连接(nonpersistent connection)，也可以使用持久连接(persistent conn-
 ection)。HTTP/1.0使用非持久连接，HTTP/1.1默认使用持久连接。


 HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：
                                                                                     |
 1 建立TCP连接
  在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完
  成的。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行
  更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80
 2 Web浏览器向Web服务器发送请求命令
  一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令
  例如：GET/sample/hello.jsp HTTP/1.1
 3 Web浏览器发送请求头信息
  浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器
  发送了一空白行来通知服务器，它已经结束了该头信息的发送。
 4 Web服务器应答
  客户机向服务器发出请求后，服务器会客户机回送应答，
  HTTP/1.1 200 OK
  应答的第一部分是协议的版本号和应答状态码
 5 Web服务器发送应答头信息
  正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的
  数据及被请求的文档。
 6 Web服务器向浏览器发送数据
  Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，
  它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据
 7 Web服务器关闭TCP连接
  一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或
  者服务器在其头信息加入了这行代码
  Connection:keep-alive
  TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连
  接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。
                                                                                     |
--> 请求
 客户端连上服务器后，向服务器请求某个web资源，称之为客户端向服务器发送了一个HTTP请求。
 HTTP请求由三部分组成，分别是：请求行、消息报头(可选)、请求正文(可选)。消息报头和请求
 正文之间用空行隔开。请求行用于描述客户端的请求方式(method),请求资源的名称以及使用的
 HTTP协议版本号。消息头用于描述客户端请求哪台主机,以及客户端的一些环境信息等。
 
 +------------------------------------------------+
 | method + space + URL + space + version + \r\n  | 请求行
 +------------------------------------------------+
 | Header: + space + value + \r\n                 | 消息头 
 | Header: + space + value + \r\n                 |
 |               ......                           |
 +------------------------------------------------+
 |\r\n                                            | 一个空行
 +------------------------------------------------+
 |                    body                        | 请求数据 
 +------------------------------------------------+
 
 -->-->请求行
  方法
    POST GET HEAD OPTIONS DELETE TRACE PUT                                           |
  URL协议
    完整地指定了要访问的网络资源，通常只要给出相对于服务器的根目录的相对目录即可，因此
	总是以“/”开头
  版本
    声明了通信过程中使用HTTP的版本
 -->-->消息头(请求头)
    请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用
	的语言，请求正文的长度等。
 -->-->请求正文
    请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请
	求正文。请求正文中可以包含客户提交的查询字符串信息等

 典型的请求消息：
 
 GET http://download.microtool.de:80/somedata.exe HTTP/1.1 
 Host: download.microtool.de   
 Accept: */*    
 Pragma: no-cache    
 Cache-Control: no-cache    
 Referer: http://download.microtool.de/   
 User-Agent: Mozilla/4.04[en](Win95;I;Nav)   
 Range: bytes=554554-
                                                                                     |
 Host头域
  Host头域指定请求资源的Intenet主机和端口号，必须表示请求url的原始服务器或网关的位置。
  HTTP/1.1请求必须包含主机头域，否则系统会以400状态码返回。
---->Referer头域
Referer头域允许客户端指定请求uri的源资源地址，这可以允许服务器生成回退链表，可用
来登陆、优化cache等。他也允许废除的或错误的连接由于维护的目的被追踪。如果请求的
uri没有自己的uri地址，Referer不能被发送。如果指定的是部分uri地址，则此地址应该是
一个相对地址。
---->Accept：
告诉WEB服务器自己接受什么介质类型，*/* 表示任何类型，type/* 表示该类型下的所有子
类型，type/sub-type。
---->Range头域
Range头域可以请求实体的一个或者多个子范围。例如，
表示头500个字节：bytes=0-499 
表示第二个500字节：bytes=500-999 
表示最后500个字节：bytes=-500 
表示500字节以后的范围：bytes=500-
第一个和最后一个字节：bytes=0-0,-1
同时指定几个范围：bytes=500-600,601-999
但是服务器可以忽略此请求头，如果无条件GET包含Range请求头，响应会以状态码206
（PartialContent）返回而不是以200（OK）。
---->User-Agent头域
User-Agent头域的内容包含发出请求的用户信息。

----> 响应
一个HTTP响应代表服务器向客户端回送的数据。
+--------------------------+
| HTTP版本 状态码 原因叙述 | 状态行 用于描述服务器对请求的处理结果 
+--------------------------+
|       Header: value      | 用于描述服务器的基本信息,以及数据的描述,服务器通过这
|                          | 些数据通知客户端如何处理等一会儿它回送的数据
+--------------------------+
|                          | 一个空行
+--------------------------+
|         body             | 代表服务器向客户端回送的数据
+--------------------------+ 

状态码: 用于表示服务器对请求的处理结果,它是一个三位的十进制数.有五种可能取值：
1xx：指示信息--表示请求已接收，继续处理(1xx表示100~199)
2xx：成功--表示请求已被成功接收、理解、接受
3xx：重定向--要完成请求必须进行更进一步的操作
4xx：客户端错误--请求有语法错误或请求无法实现
5xx：服务器端错误--服务器未能实现合法的请求
常见状态代码、状态描述、说明：
200 OK              客户端请求成功
400 Bad Request     客户端请求有语法错误，不能被服务器所理解
401 Unauthorized    请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 
403 Forbidden       服务器收到请求，但是拒绝提供服务
404 Not Found       请求资源不存在，eg：输入了错误的URL
500 Internal Server Error 服务器发生不可预期的错误
503 Server Unavailable    服务器当前不能处理客户端的请求，一段时间后可能恢复正常

典型的响应消息：
HTTP/1.0200OK
Date:Mon,31Dec200104:25:57GMT
Server:Apache/1.3.14(Unix)
Content-type:text/html
Last-modified:Tue,17Apr200106:46:28GMT
Etag:"a030f020ac7c01:1e9f"
Content-length:39725426?
Content-range:bytes554554-40279979/40279980


Location响应头
Location响应头用于重定向接收者到一个新URI地址。
Server响应头
Server响应头包含处理请求的原始服务器的软件信息。此域能包含多个产品标识和注释，产
品标识一般按照重要性排序。
