/* http://vger.kernel.org/~davem/skb_data.html */

/*http://www.91linux.com/html/article/kernel/20090730/17655.html*/

/******************************************************************************* 
 尽量避免数据包的拷贝，提高网络处理性能。目前linux协议栈接收数据的时候需要拷贝
 两次:数据报进入网卡驱动拷贝一次，从内核空间递交给用户空间时再拷贝一次
 ******************************************************************************/

struct sk_buff {
	/* These two members must be first. */
	struct sk_buff		*next;
	struct sk_buff		*prev;

	union {
		ktime_t		tstamp;
		struct skb_mstamp skb_mstamp;
	};

	struct sock		*sk;
	struct net_device	*dev;

	/*
	 * This is the control buffer. It is free to use for every
	 * layer. Please put your private variables there. If you
	 * want to keep them across layers you have to do a skb_clone()
	 * first. This is owned by whoever has the skb queued ATM.
	 */
	char			cb[48] __aligned(8);

	unsigned long		_skb_refdst;
	void			(*destructor)(struct sk_buff *skb);
#ifdef CONFIG_XFRM
	struct	sec_path	*sp;
#endif
#if defined(CONFIG_NF_CONNTRACK) || defined(CONFIG_NF_CONNTRACK_MODULE)
	struct nf_conntrack	*nfct;
#endif
#if IS_ENABLED(CONFIG_BRIDGE_NETFILTER)
	struct nf_bridge_info	*nf_bridge;
#endif

/*******************************************************************************
 len表示skb管理的data buffer的总长度。通常data buffer是一个简单的线性buffer，这
 时候len就是线性buffer的数据长度。在有"paged data"情况下，data buffer不仅包括第
 一个线性的buffer，还包括多个page buffer。在这种情况下data_len表示page buffer中
 数据的长度，len是线性buffer加page buffer的长度。mac_len表示MAC头得长度。
 ******************************************************************************/
	unsigned int		len;
	unsigned int		data_len;
	__u16			    mac_len;
	__u16			    hdr_len;

	/* Following fields are _not_ copied in __copy_skb_header()
	 * Note that queue_mapping is here mostly to fill a hole.
	 */
	kmemcheck_bitfield_begin(flags1);
	__u16			queue_mapping;
	__u8			cloned:1,
				nohdr:1,
				fclone:2,
				peeked:1,
				head_frag:1,
				xmit_more:1;
	/* one bit hole */
	kmemcheck_bitfield_end(flags1);

	/* fields enclosed in headers_start/headers_end are copied
	 * using a single memcpy() in __copy_skb_header()
	 */
	/* private: */
	__u32			headers_start[0];
	/* public: */

/* if you move pkt_type around you also must adapt those constants */
#ifdef __BIG_ENDIAN_BITFIELD
#define PKT_TYPE_MAX	(7 << 5)
#else
#define PKT_TYPE_MAX	7
#endif
#define PKT_TYPE_OFFSET()	offsetof(struct sk_buff, __pkt_type_offset)

	__u8			__pkt_type_offset[0];
	__u8			pkt_type:3;
	__u8			pfmemalloc:1;
	__u8			ignore_df:1;
	__u8			nfctinfo:3;

	__u8			nf_trace:1;
	__u8			ip_summed:2;
	__u8			ooo_okay:1;
	__u8			l4_hash:1;
	__u8			sw_hash:1;
	__u8			wifi_acked_valid:1;
	__u8			wifi_acked:1;

	__u8			no_fcs:1;
	/* Indicates the inner headers are valid in the skbuff. */
	__u8			encapsulation:1;
	__u8			encap_hdr_csum:1;
	__u8			csum_valid:1;
	__u8			csum_complete_sw:1;
	__u8			csum_level:2;
	__u8			csum_bad:1;

#ifdef CONFIG_IPV6_NDISC_NODETYPE
	__u8			ndisc_nodetype:2;
#endif
	__u8			ipvs_property:1;
	__u8			inner_protocol_type:1;
	/* 4 or 6 bit hole */

#ifdef CONFIG_NET_SCHED
	__u16			tc_index;	/* traffic control index */
#ifdef CONFIG_NET_CLS_ACT
	__u16			tc_verd;	/* traffic control verdict */
#endif
#endif

	union {
		__wsum		csum;
		struct {
			__u16	csum_start;
			__u16	csum_offset;
		};
	};
	__u32			priority;
	int			skb_iif;
	__u32			hash;
	__be16			vlan_proto;
	__u16			vlan_tci;
#ifdef CONFIG_NET_RX_BUSY_POLL
	unsigned int	napi_id;
#endif
#ifdef CONFIG_NETWORK_SECMARK
	__u32			secmark;
#endif
	union {
		__u32		mark;
		__u32		dropcount;
		__u32		reserved_tailroom;
	};

	union {
		__be16		inner_protocol;
		__u8		inner_ipproto;
	};

	__u16			inner_transport_header;
	__u16			inner_network_header;
	__u16			inner_mac_header;

	__be16			protocol;
	__u16			transport_header;
	__u16			network_header;
	__u16			mac_header;

	/* private: */
	__u32			headers_end[0];
	/* public: */

	/* These elements must be at the end, see alloc_skb() for details.  */
	
/*******************************************************************************
	head		                         end
	 |		                          |
	\|/ 		                         \|/
  +-------------------------------------+
  |           |             |           |  
  | head room | packet data | tail room | 
  |           | 		     |           |
  +-------------------------------------+
             /|\           /|\
              |             |
             data          tail
             
 head room   : 空闲区域，需要增加协议头从这个区域中分出一块
 packet data : 真正的数据
 tail room   : 空闲区域 如果需要增加数据从这个区域中分出一块
 ******************************************************************************/
	sk_buff_data_t   tail; /* 实际数据的结束 */
	sk_buff_data_t   end;  /* buffer的结束 */
	unsigned char   *head; /* buffer的开始 */
	unsigned char   *data; /* 实际数据的开始 */
	unsigned int     truesize;
	atomic_t		users;
};



/******************************************************************************* 
 This data is invariant across clones and lives at the end of the header data, 
 ie. at skb->end.

 1 用于管理paged data
 2 用于管理分片

 nr_frags
    how many frags there are active in the frags[] array.

 frag_list
    maintain a chain of SKBs organized for fragmentation purposes, it is _not_
    used for maintaining paged data.
    
 frags
    holds the frag descriptors themselves
 
 ******************************************************************************/
struct skb_shared_info 
{
    unsigned char nr_frags;
	
	__u8		tx_flags;
	unsigned short	gso_size;
	/* Warning: this field is not always filled in (UFO)! */
	unsigned short	gso_segs;
	unsigned short  gso_type;

	
	struct sk_buff	*frag_list;
	
	struct skb_shared_hwtstamps hwtstamps;
	u32		tskey;
	__be32          ip6_frag_id;

	/*
	 * Warning : all fields before dataref are cleared in __alloc_skb()
	 */
	atomic_t	dataref;

	/* Intermediate layers must ensure that destructor_arg
	 * remains valid until skb destructor */
	void *		destructor_arg;

	/* must be last field, see pskb_expand_head() */
	skb_frag_t	frags[MAX_SKB_FRAGS];
};

/*******************************************************************************
 有时希望能将保存在文件中的数据，通过socket直接发送出去，这样避免了把数据先从文件
 拷贝到缓冲区，从而提高了效率。linux采用一种"paged data"的技术，来提供这种支持。
 这种技术将文件中的数据直接映射为多个page。skb_frag_t用来管理这种page。
 ******************************************************************************/
typedef struct skb_frag_struct skb_frag_t;

struct skb_frag_struct {
	struct {
		struct page *p;
	} page;
#if (BITS_PER_LONG > 32) || (PAGE_SIZE >= 65536)
	__u32 page_offset;
	__u32 size;
#else
	__u16 page_offset;
	__u16 size;
#endif
};




/*******************************************************************************
@size:数据区的大小，实际申请的大小是 size + sizeof(struct skb_shared_info)

head
 |
\|/
 +-------------------------------------------------------------------+
 |           |       |                 |       | kmalloc(size) might |
 |  raw size | align | skb_shared_info | align | give us more room   |
 |           |       |                 |       | than requested.     |
 +---------------------------------------------+---------------------+
/|\                                                                 /|\
 |                                                                   |
tail                                                        end(skb->tail + size)
data
 
*******************************************************************************/
static inline struct sk_buff *alloc_skb(unsigned int size,gfp_t priority);



/*******************************************************************************
 skb_reserve - adjust headroom
 @skb: buffer to alter
 @len: bytes to move

 Increase the headroom of an empty &sk_buff by reducing the tail room. This is 
 only allowed for an empty buffer.

 Typically, when building output packets, we reserve enough bytes for the maximum 
 amount of header space we think we'll need. Most IPV4 protocols can do this by 
 using the socket value sk->sk_prot->max_header.

 When setting up receive packets that an ethernet device will DMA into, we 
 typically call skb_reserve(skb, NET_IP_ALIGN). By default NET_IP_ALIGN is defined 
 to '2'. This makes it so that, after the ethernet header, the protocol header will 
 be aligned on at least a 4-byte boundary. Nearly all of the IPV4 and IPV6 protocol 
 processing assumes that the headers are properly aligned.

 head         data
  |            |
 \|/          \|/
  +-------------------------+
  |            |            |  skb->data += len;
  |  head room |  tail room |  skb->tail += len;
  |            |            |
  +-------------------------+
              /|\          /|\
  |<-- len  -->|            |
 old tail     tail          end
 ******************************************************************************/
static inline void skb_reserve(struct sk_buff *skb, int len);



/*******************************************************************************
 skb_put - add data to a buffer
 @skb: buffer to use
 @len: amount of data to add

 This function extends the used data area of the buffer. If this would exceed the 
 total buffer size the kernel will panic. A pointer to the first byte of the extra 
 data is returned.

 skb_put() advances 'skb->tail' by the specified number of bytes, it also increments 
 'skb->len' by that number of bytes as well. This routine must not be called on 
 a SKB that has any paged data. You must also be sure that there is enough tail 
 room in the SKB for the amount of bytes you are trying to put. Both of these 
 conditions are checked for by skb_put() and an assertion failure will trigger 
 if either rule is violated.

 head         data
  |            |
 \|/          \|/
  +-----------------------------------+
  |            |           |          |     skb->len  += len;
  |  head room | user data |tail room |     skb->tail += len;
  |            |           |          |
  +-----------------------------------+
                          /|\        /|\
               |<-- len -->|          |
            old tail      tail        end
 ******************************************************************************/
unsigned char *skb_put(struct sk_buff *skb, unsigned int len);


/*******************************************************************************
 skb_push - add data to the start of a buffer
 @skb: buffer to use
 @len: amount of data to add

 This function extends the used data area of the buffer at the buffer start. If 
 this would exceed the total buffer headroom the kernel will panic. A pointer to 
 the first byte of the extra data is returned.

 skb_push() will decrement the 'skb->data' pointer by the specified number of bytes. 
 It will also increment 'skb->len' by that number of bytes as well. The caller must 
 make sure there is enough head room for the push being performed. This condition 
 is checked for by skb_push() and an assertion failure will trigger if this rule 
 is violated.

  head        data       old data
  |            |<-- len --> |
 \|/          \|/          \|/
  +------------------------------------------------+   skb_push(skb, sizeof(struct udphdr));
  |            |            |           |          |     
  |  head room | udp header | user data |tail room |   skb->len  += len;
  |            |            |           |          |   skb->data -= len;
  +------------------------------------------------+
                                       /|\        /|\
                                        |          |
                                       tail        end
 ******************************************************************************/
unsigned char *skb_push(struct sk_buff *skb, unsigned int len);





/*******************************************************************************
 如果data_len非0，这个sk_buffer管理的数据就是"非线性"的。skb->len-skb->data_len
 就是非paged数据的长度。在有"paged data"情况下，skb_put()就无法使用了，必须使用
 pskb_put()
 ******************************************************************************/
static inline unsigned int skb_headlen(const struct sk_buff *skb);



/*******************************************************************************
 * skb_fill_page_desc - initialise a paged fragment in an skb
 * @skb: buffer containing fragment to be initialised
 * @i: paged fragment index to initialise
 * @page: the page to use for this fragment
 * @off: the offset to the data with @page
 * @size: the length of the data
 *
 * As per __skb_fill_page_desc() -- initialises the @i'th fragment of
 * @skb to point to @size bytes at offset @off within @page. In
 * addition updates @skb such that @i is the last fragment.
 *
 * Does not take any additional reference on the fragment.
 ******************************************************************************/
void skb_fill_page_desc(struct sk_buff *skb, int i,struct page *page, int off, int size);

