http://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html  字符集和字符编码（Charset & Encoding）
http://www.freebuf.com/articles/others-articles/25623.html     学点编码知识又不会死：Unicode的流言终结者和编码大揭秘
http://www.cnblogs.com/hongfei/p/3648794.html                  趣谈unicode，ansi，utf-8，unicode big endian这些编码有什么区别
-------------------------------------------------------------------------------------|
DBCS  Double Byte Charecter Set 双字节字符集 
Ascii American Standard Code for Information Interchange，美国信息互换标准代码
UCS   Universal Multiple-Octet Coded Character Set，简称 UCS, 俗称 "UNICODE"。 
BOM   byte-order mark 字节序标记
BMP   Basic Multilingual Plane                                                       |
原始的ASCII标准定义了从0到127的字符, 128到255的编码并没有被制定ASCII标准的人所规定,其|
它国家的人趁这个机会开始使用128到255范围内的编码来表达自己语言中的字符. ASCII码的问题|
在于尽管所有人都在0-127号字符的使用上达成了一致, 但对于128-255号字符却有很多很多不同 |
的解释. 与此同时, 在亚洲有更让人头疼的问题. 亚洲语言有更多的字符和字形需要被存储, 一 |
个字节已经不够用了. 所以他们开始使用两个字节来存储字符, 这被称作DBCS(双字节编码方案).|
                                                                                     |
应该提出一种标准方案来展示世界上所有语言中的所有字符, 出于这个目的, Unicode诞生了.   |
Unicode就像一个电话本, 标记着字符和数字之间的映射关系. 理论上每种语言中的每种字符都被|
Unicode协会指定了一个数字. Unicode只是一个用来映射字符和数字的标准. 它对支持字符的数 |
量没有限制, 也不要求字符必须占两个,三个或者其它任意数量的字节. Unicode字符是怎样被编 |
码成内存中的字节这是另外的话题, 它是被UTF(Unicode Transformation Formats)定义的.     |
                                                                                     |
两个最流行的Unicode编码方案是UTF-8和UTF-16。                                         |
在UTF-8中, 0-127号的字符用1个字节来表示, 使用和US-ASCII相同的编码. 这意味着1980年代写|
的文档用UTF-8打开一点问题都没有. 只有128号及以上的字符才用2个,3个或者4个字节来表示.因|
此, UTF-8被称作可变长度编码. UTF-16它使用2个或者4个字节来存储字符.                   |
                                                                                     |
字节序标记(BOM)                                                                      |
如果你经常要在高低字节序的系统间转换文档, 并且希望区分字节序, 还有一种奇怪的约定, 被 |
称作BOM. BOM是一个设计得很巧妙的字符, 用来放在文档的开头告诉阅读器该文档的字节序. 在 |
UTF-16中, 它是通过在第一个字节放置FE FF来实现的. 在不同字节序的文档中, 它会被显示成  |
FF FE或者FE FF, 清楚的把这篇文档的字节序告诉了解释器.                                |
                                                                                     |
二进制流到屏幕字符的过程                                                             |
二进制流->根据编码方式解码出码点->根据unicode码点解释出字符->系统渲染绘出这个字符    |
文本字符保存到计算机上的过程                                                         |
输入字符->根据字符找到对应码点->根据编码方式把码点编码成二进制流->保存二进制流到硬盘 |
                                                                                     |
通用字符集(Universal Character Set, UCS)是由ISO制定的ISO 10646(或称ISO/IEC 10646)标准|
所定义的标准字符集. UCS-2用两个字节编码, UCS-4用4个字节编码.                         |
UCS-4根据最高位为0的最高字节分成2^7=128个group. 每个group再根据次高字节分为256个平面 |
(plane). 每个平面根据第3个字节分为256行(row), 每行有256个码位(cell). group 0的平面0被|
称作BMP(Basic Multilingual Plane). 如果UCS-4的前两个字节为全零，那么将UCS-4的BMP去掉 |
前面的两个零字节就得到了UCS-2. 每个平面有2^16=65536个码位. Unicode计划使用了17个平面,|
一共有17×65536=1114112个码位. 在Unicode 5.0.0版本中, 已定义的码位只有238605个, 分布在|
平面0,平面1,平面2,平面14,平面15,平面16. 其中平面15和平面16上只是定义了两个各占65534个|
码位的专用区(Private Use Area), 分别是0xF0000-0xFFFFD和0x100000-0x10FFFD. 所谓专用区,|
就是保留给大家放自定义字符的区域, 可以简写为PUA.                                     |
                                                                                     |
----> 码位 编码位置 code point or code position 
http://en.wikipedia.org/wiki/Code_point                          
In character encoding terminology, a code point or code position is any of the numer-
ical values that make up the code space. Many code points represent single characters 
but they can also have other meanings, such as for formatting.
For example, the character encoding scheme ASCII comprises 128 code points in the ra-
nge 0x0 to 0x7F, Extended ASCII comprises 256 code points in the range 0x0 to 0xFF, -
and Unicode comprises 1,114,112 code points in the range 0x0 to 0x10FFFF. The Unicode 
code space is divided into seventeen planes (the basic multilingual plane, and 16 su-
pplementary planes), each with 65,536 (= 2^16) code points. Thus the total size of t-
he Unicode code space is 17 × 65,536 = 1,114,112.

----> types_java.java
In the Unicode standard, code points are written in hexadecimal and prefixed with U+, 
such as U+0041 for the code point of the Latin letter A. Unicode has code points that 
are grouped into 17 code planes. The first code plane , called the basic multilingual 
plane, consists of the "classic" Unicode characters with code points U+0000 to U+FFFF
. Sixteen additional planes, with code points U+10000 to U+10FFFF, hold the suppleme-
ntary characters.
The UTF-16 encoding represents all Unicode code points in a variable-length code. The
characters in the basic multilingual plane are represented as 16-bit values, called -
code units. The supplementary characters are encoded as consecutive pairs of code un-
its. Each of the values in such an encoding pair falls into a range of 2048 unused v-
alues of the basic multilingual plane, called the surrogates area (U+D800 to U+DBFF -
for the first code unit, U+DC00 to U+DFFF for the second code unit). This is rather -
clever, because you can immediately tell whether a code unit encodes a single charac-
ter or it is the first or second part of a supplementary character. For example , the 
mathematical symbol for the set of integers  ZZ has code point U+1D56B and is encoded 
by the two code units U+D835 and U+DD6B. (See http://en.wikipedia.org/wiki/UTF-16 for 
a description of the encoding algorithm.)
In Java, the char type describes a code unit in the UTF-16 encoding. Our strong reco-
mmendation is not to use the char type in your programs unless you are actually mani-
pulating UTF-16 code units. You are almost always better off treating strings as abs-
tract data types.



----> Variables
In Java, every variable has a type. You declare a variable by placing the type first, 
followed by the name of the variable. Here are some examples:
double salary;
int vacationDays;
long earthPopulation;
boolean done;
Notice the semicolon at the end of each declaration. The semicolon is necessary beca-
use a declaration is a complete Java statement.

----> variable name
A variable name must begin with a letter and must be a sequence of letters or digits. 
Note that the terms "letter" and "digit" are much broader in Java than in most langu-
ages. A letter is defined as 'A'–'Z', 'a'–'z', '_', '$',or any Unicode character that 
denotes a letter in a language. For example, Greek speakers could use a π. Similarly, 
digits are '0'–'9' and any Unicode characters that denote a digit in a language. Sym-
bols like '+' cannot be used inside variable names, nor can spaces. All characters in 
the name of a variable are significant and case is also significant. The length of  a 
variable name is essentially unlimited.

If you are really curious as to what Unicode characters are "letters" as far as  Java 
is concerned , you can use the isJavaIdentifierStart and isJavaIdentifierPart methods 
in the Character class to check. Even though $ is a valid Java letter, you should not 
use it in your own code. It is intended for names that are generated by the Java com-
piler and other tools. You also cannot use a Java reserved word for a variable name. 

You can have multiple declarations on a single line:
int i, j; // both are integers
However, we don’t recommend this style. If you declare each variable separately, your
programs are easier to read.

----> Initializing Variables
After you declare a variable, you must explicitly initialize it by means of an assig-
nment statement. For example, the Java compiler flags the following sequence of stat-
ements as an error:
int vacationDays;
System.out.println(vacationDays); // ERROR--variable not initialized

You assign to a previously declared variable by using the variable name on the left, 
an equal sign (=), and then some Java expression with an appropriate value on the ri-
ght.
int vacationDays;
vacationDays = 12;
You can both declare and initialize a variable on the same line. For example:
int vacationDays = 12;
Finally, in Java you can put declarations anywhere in your code. For example, the fo-
llowing is valid code in Java:
double salary = 65000.0;
System.out.println(salary);
int vacationDays = 12; // OK to declare a variable here
In Java, it is considered good style to declare variables as closely as possible to -
the point where they are first used.

C and C++ distinguish between the declaration and definition of a variable. For exam-
ple,
int i = 10;
is a definition, whereas
extern int i;
is a declaration. In Java, no declarations are separate from definitions.

----> Constants
In Java, you use the keyword final to denote a constant . The keyword final indicates 
that you can assign to the variable once, and then its value is set once and for all. 
It is customary to name constants in all uppercase. It is probably more common in Ja-
va to create a constant  so it’s available to multiple methods inside a single class. 
These are usually called class constants. Set up a class constant with the keywords -
static final. Here is an example of using a class constant:

public class Constants2
{
    public static final double CM_PER_INCH = 2.54;
    public static void main(String[] args)
    {
        double paperWidth = 8.5;
        double paperHeight = 11;
        System.out.println("Paper size in centimeters: "
        + paperWidth * CM_PER_INCH + " by " + paperHeight * CM_PER_INCH);
    }
}

Note that the definition of the class constant appears outside the main method. Thus, 
the constant can also be used in other methods of the same class. Furthermore, if the 
constant is declared, as in our example, public, methods of other classes can also u-
se it. in our example, as Constants2.CM_PER_INCH.




















