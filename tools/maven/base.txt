http://www.infoq.com/cn/news/2011/06/xxb-maven-9-package/  Maven实战（九）――打包的技巧



--> 坐标
 -->--> 坐标
  Maven坐标是通过一些元素定义的，他们是groupId、artifactId、version、packaging、classfier
  现在，只要我们提供正确的坐标元素，Maven就能找到对应的构建。我们在开发自己项目的时候，也要
  为其定义适当的坐标，这是Maven强制要求的。
 
  同时，项目构建的文件名是与坐标相对应的，一般规则为
  artifactId-version[-classfier].packaging
 
  <groupId>org.sonatype.nexus</groupId>
  <artifactId>nexus-indexer</artifactId>
  <version>2.0.0</version>
  <packaging>jar</packaging>
 
 -->--> groupId (必须定义)
  定义当前Maven项目隶属的实际项目。                                                                
  上例中，groupId为org.sonatype.nexus，org.sonatype表示Sonatype公司建立的一个非盈利性组织，nexus表
  示Nexus这一实际项目。
 -->--> artifactId (必须定义)
  定义实际项目中的一个Maven项目(模块)，推荐使用实际项目名称作为artifactId的前缀。
  上例中， artifactId为nexus-indexer，使用了实际项目名nexus作为前缀。
 -->--> version (必须定义)
  定义Maven项目当前所处的版本。
 -->--> packaging (可选默认是jar)
  定义Maven项目的打包方式(jar war)，默认为jar。
  上例中packaging为jar，最终的文件名为nexus-indexer-2.0.0.jar
 -->--> classifier (不能直接定义)
  定义构建输出的一些附属构建。附属构建与主构件对应，上例中的主构件是nexus-indexer-2.0.0.jar
  该项目可能还会通过一些插件生成如nexus-indexer-2.0.0-javadoc.jar、nexus-indexer-2.0.0-source.jar
  这样一些附属构建，其包含了java文档和源代码。
                                                                                     
--> 依赖
 根元素project下的dependencies可以包含一个或多个dependency元素，以声明一个或者多个项
 目依赖。每个依赖可以包含的元素有：
 
 <project>
 ...
	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>2.5.6</version>
            <type>...</type>
            <scope>...</scope>
            <optional>...</optional>
            <exclusions>
                <exclusion>
                ...
                </exclusion>
            ...
            </exclusions>
        ...
		</dependency>
		<dependency>
        </dependency>
        ...
	</dependencies>
 ...
 </project>
 
 groupId、artifactId和version：依赖的基本坐标。
 type：依赖的类型，对应于项目坐标定义的packaging。默认为jar
 scope：依赖的范围
 optional：标记依赖是否可选
 exclusions：用来排除传递性依赖。

--> 仓库
 -->--> 仓库
  http://blog.csdn.net/wanghantong/article/details/36427433
 
  路径与坐标的大致对应关系为groupId/artifactid/version/artifactId-version.packaging
  例如， log4j:log4j:1.2.15对应 log4j/log4j/1.2.15/log5j-1.2.15.jar
 
  Maven仓库：本地仓库、远程仓库
   本地仓库：
   远程仓库：中央仓库、私服、其它公共库

 -->--> 本地仓库
  C:\Users\xxx\.m2\repository   本地仓库默认路径
  /home/xxx/.m2/repository  
  
  <settings>
   <localRepository>D:\java\rep\</localRepository> 配置本地仓库路径  settings.xml
  </settings>
                                                                                     
 -->--> 中央仓库
  由于原始的本地仓库是空的，Maven必须知道至少一个可用的远程仓库。中央仓库就是这样一个
  默认的远程仓库。
  中央仓库是默认的远程仓库，maven在安装的时候，自带的就是中央仓库的配置。在maven的聚
  合与继承中我们说过，所有的maven项目都会继承超级pom，具体的说，包含了下面配置的pom我
  们就称之为超级pom
  
  <repositories>  
    <repository>  
      <id>central</id>  <!-- 对中央仓库进行唯一标识，任何仓库声明的id都必须是唯一的。-->
      <name>Central Repository</name>  
      <url>http://repo.maven.apache.org/maven2</url>  <!-- 可以在浏览器中输入url，浏览构建 -->
      <layout>default</layout>  <--! 仓库布局 -->
      <snapshots>  
        <enabled>false</enabled>   <--! 不下载快照版本 -->
      </snapshots>  
    </repository>  
  </repositories> 
  
  超级pom：MAVEN_HOME/lib/maven-model-builder-3.0.jar，解压后 org/apache/maven/model/pom-4.0.0.xml
                                                                                    
 -->--> 私服
  私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，私服代理广域网上的远程仓库，
  供局域网内的Maven用户使用。当Maven需要下载构件的时候，它从私服请求，如果私服上不存
  在该构件，则从外部的远程仓库下载，缓存在私服上之后，再为Maven的下载请求提供服务。我
  们还可以把一些无法从外部仓库下载到的构件上传到私服上。 
  
  当前主流的maven私服：
  1.Apache的Archiva
  2.JFrog的Artifactory
  3.Sonatype的Nexus
  
 -->--> 其它公共库
  pass
  
 -->--> 远程仓库配置
  配置远程仓库将引入新的配置元素：<repositories>     <repository>
  在<repositories>元素下，可以使用  <repository> 子元素声明一个或者多个远程仓库。
  
  例子：
  
  <repositories>  
        <repository>  
            <id>jboss</id>  
            <name>JBoss Repository</name>  
            <url>http://repository.jboss.com/maven2/</url>  
            <releases>  
                <updatePolicy>daily</updatePolicy> <!-- never,always,interval n -->  
                <enabled>true</enabled>  <!-- 下载发布版本 --> 
                <checksumPolicy>warn</checksumPolicy><!-- fail,ignore -->  
            </releases>  
            <snapshots>  
                <enabled>false</enabled>  <!-- 不下载快照版本 -->
            </snapshots>  
            <layout>default</layout>  
        </repository>  
  </repositories> 

  <updatePolicy>元素：
    表示更新的频率，值有：never, always,interval,daily, daily 为默认值
	interval n， n是小时
  <checksumPolicy>元素：warn fail ignore
    表示maven检查"检验和文件"的策略。 
	warn为默认值：校验失败发出告警。
	fail：校验失败就让构建失败。
	ignore：完全忽略"校验和"错误
 
 -->--> 镜像
  http://fhd001.iteye.com/blog/1193559                                               
  
  如果仓库X可以提供仓库Y存储的所有内容，那么就可以认为X是Y的一个镜像。换句话说，任何一
  个可以从仓库Y获得的构件，都能够从它的镜像中获取。举个例子，
  http://maven.net.cn/content/groups/public/是中央仓库http://repo1.maven.org/maven2/ 
  在中国的镜像，由于地理位置的因素，该镜像往往能够提供比中央仓库更快的务。因此，可以配
  置Maven使用该镜像来替代中央仓库。编辑settings.xml，代码如下：
  
  <settings>  
    ...  
    <mirrors>  
      <mirror>  
        <id>maven.net.cn</id>  
        <name>one of the central mirrors in china</name>  
        <url>http://maven.net.cn/content/groups/public/</url>  
        <mirrorOf>central</mirrorOf>  <--! 表示是中央仓库的镜像 -->
      </mirror>  
    </mirrors>  
    ...  
  </settings>                                                                        
  
  该例中，<mirrorOf>的值为central，表示该配置为中央仓库的镜像，任何对于中央仓库的请求
  都会转至该镜像，用户也可以使用同样的方法配置其他仓库的镜像。另外三个元素id,name,url
  与一般仓库配置无异，表示该镜像仓库的唯一标识符、名称以及地址。类似地，如果该镜像需认
  证，也可以基于该id配置仓库认证。
  
  关于镜像的一个更为常见的用法是结合私服。由于私服可以代理任何外部的公共仓库(包括中央
  仓库)，因此，对于组织内部的Maven用户来说，使用一个私服地址就等于使用了所有需要的外部
  仓库，这可以将配置集中到私服，从而简化Maven本身的配置。在这种情况下，任何需要的构件
  都可以从私服获得，私服就是所有仓库的镜像。这时，可以配置这样的一个镜像，如例： 
 
  <settings>  
    ...  
    <mirrors>  
      <mirror>  
        <id>internal-repository</id>  
        <name>Internal Repository Manager</name>  
        <url>http://192.168.1.100/maven2</url>  
        <mirrorOf>*</mirrorOf>  
      </mirror>  
    </mirrors>  
    ...  
  </settings>  
  
  该例中<mirrorOf>的值为星号，表示该配置是所有Maven仓库的镜像，任何对于远程仓库的请求都
  会被转至http://192.168.1.100/maven2/。如果该镜像仓库需要认证，则配置一个Id为
  internal-repository的<server>即可。为了满足一些复杂的需求，Maven还支持更高级的镜像配置：

  1.<mirrorOf>*</mirrorOf>
    匹配所有远程仓库。
  2.<mirrorOf>external:*</mirrorOf>
    匹配所有远程仓库，使用localhost的除外，使用file://协议的除外。也就是说，匹配所有不在
	本机上的远程仓库。
  3.<mirrorOf>repo1,repo2</mirrorOf>
    匹配仓库repo1和repo2，使用逗号分隔多个远程仓库。
  4.<mirrorOf>*,!repo1</miiroOf>
    匹配所有远程仓库，repo1除外，使用感叹号将仓库从匹配中排除。
 
  需要注意的是，由于镜像仓库完全屏蔽了被镜像仓库，当镜像仓库不稳定或者停止服务的时候，Maven
  仍将无法访问被镜像仓库，因而将无法下载构件。
 
--> 生命周期
 Maven有三套相互独立的生命周期： clean default site
 clean：清理项目
 default: 构建项目
 site：建立项目站点
 
 每个生命周期包含一些阶段(phase)
 1、clean生命周期：清理项目，包含三个phase。
  1）pre-clean：执行清理前需要完成的工作
  2）clean：清理上一次构建生成的文件
  3）post-clean：执行清理后需要完成的工作

 2、default生命周期：构建项目，重要的phase如下。
  1）validate：验证工程是否正确，所有需要的资源是否可用。
  2）compile：编译项目的源代码。  
  3）test：使用合适的单元测试框架来测试已编译的源代码。这些测试不需要已打包和布署。
  4）Package：把已编译的代码打包成可发布的格式，比如jar。
  5）integration-test：如有需要，将包处理和发布到一个能够进行集成测试的环境。
  6）verify：运行所有检查，验证包是否有效且达到质量标准。
  7）install：把包安装到maven本地仓库，可以被其他工程作为依赖来使用。
  8）Deploy：在集成或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。

 3、site生命周期：建立和发布项目站点，phase如下
  1）pre-site：生成项目站点之前需要完成的工作
  2）site：生成项目站点文档
  3）post-site：生成项目站点之后需要完成的工作
  4）site-deploy：将项目站点发布到服务器
  
 各个生命周期相互独立，一个生命周期的阶段前后依赖。

 举例如下：
 1、mvn clean
 调用clean生命周期的clean阶段，实际执行pre-clean和clean阶段 
 2、mvn test
 调用default生命周期的test阶段，实际执行test以及之前所有阶段
 3、mvn clean install 
 调用clean生命周期的clean阶段和default的install阶段，实际执行pre-clean和clean，install以及之前所有阶段
  
--> 插件
 http://www.cnblogs.com/luotaoyeah/p/3819001.html
 http://blog.csdn.net/wanghantong/article/details/9375013 maven详解之生命周期与插件(一) 
 
 Maven的核心仅仅定义了抽象的生命周期，具体的任务是交由插件完成的，插件以独立的构建形
 式存在。一个插件通常可以完成多个任务，每一个任务就叫做插件的一个目标。
 
 Maven的生命周期是抽象的，实际需要插件来完成任务，这一过程是通过将插件的目标（goal）
 绑定到生命周期的具体阶段（phase）来完成的。如：将maven-compiler-plugin插件的compile
 目标绑定到default生命周期的compile阶段，完成项目的源代码编译。
 
 -->--> 内置绑定
  Maven对一些生命周期的阶段（phase）默认绑定了插件目标。
  
  clean生命周期阶段与插件目标的绑定关系
  生命周期阶段    插件目标
  pre-clean     
  clean           maven-clean-plugin:clean
  post-clean

  site生命周期阶段与插件目标的绑定关系 
  生命周期阶段    插件目标
  pre-site     
  site            maven-site-plugin:site
  post-site     
  site-deploy    maven-site-plugin:deploy  
  
  default生命周期与内置插件绑定关系及具体任务(打包类型: jar)
  生命周期阶段              插件目标                                 执行任务
  process-resources         maven-resources-plugin:resources         复制主资源文件至主输出目录
  compile                   maven-compile-plugin:compile             编译主代码至主输出目录
  process-test-resources    maven-resources-plugin:testRresources    复制测试资源文件至测试输出目录
  test-compile              maven-compiler-plugin:testCompile        编译测试代码至测试输出目录
  test                      maven-surefire-plugin:test               执行测试用例
  package                   maven-jar-plugin:jar                     创建项目jar包
  install                   maven-install-plugin:install             将项目输出构件安装到本地仓库
  deploy                    maven-deploy-plugin:deploy               将项目输出构件部署到远程仓库
  
 -->--> 自定义绑定
  用户能够自己选择将某个插件目标绑定到生命周期的某个阶段上。一个常见的例子就是创建项
  目的源码jar包，内置的插件绑定关系中没有涉及这一任务，要用户自行配置。maven-source-plugin
  可以帮助我们完成该任务，它的jar-no-fork目标能够将项目的主代码打包成jar文件，可以将
  其绑定到default生命周期的verify阶段上，在执行完集成测试后和安装构建之前创建源码jar
  包。具体的配置如下：
  <build>                                                                            
      <plugins>
          <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-source-plugin</artifactId>
              <version>2.2.1</version>
              <executions>
                  <execution>
                      <id>attach-source</id>
                      <phase>verify</phase>         <!-- 要绑定到的生命周期的阶段 -->
                      <goals>
                          <goal>jar-no-fork</goal>  <!-- 要绑定的插件的目标，它会创建一个以-sources.jar结尾的源码文件包 -->
                      </goals>
                  </execution>
              </executions>
          </plugin>
      </plugins>
      ……
  </build>                                                                           

  上述配置中，除了基本的插件坐标声明外，还有插件执行配置，executions下每个execution子
  元素可以用来配置执行一个任务。该例中配置了一个id为attach-sources的任务，通过phase配
  置，将其绑定到verify生命周期阶段上，再通过goals配置指定要执行的插件目标。
  
  有时候，即使不通过phase元素配置生命周期阶段，插件目标也能够绑定到生命周期中去。例如
  ，可以删除上述配置中的phase一行，再次执行mvn verify，仍然可以看到maven-source-plugin:jar-no-fork
  得以执行。出现这一现象的原因是：很多插件的目标在编写时已经定义了默认绑定阶段。可以
  使用maven-help-plugin查看插件详细信息：
  $ mvn help:describe-Dplugin=org.apache.maven.plugins:maven-source-plugin:2.1.1-Ddetail
  
  当插件目标被绑定到不同的生命周期阶段的时候，其执行顺序会由生命周期阶段的先后顺序决定。
  当多个插件目标绑定到同一个阶段的时候，这些插件声明的先后顺序决定了目标的执行顺序。
                                                                                     
 -->--> 插件配置
  完成了插件和生命周期的绑定之后，用户还可以配置插件目标的参数，进一步调整插件目标所
  执行的任务，以满足项目的需求
  
  1 命令行配置，使用-D参数
  $ mvn install -Dmaven.test.skip=true
  参数-D是java自带的，maven简单地重用了该参数。
  
  2 在POM中配置
  
  <plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-compiler-plugin</artifactId>
    <configuration>
        <source>1.7</source> # 编译Java 1.5版本的源文件
        <target>1.7</target> # 生成与JVM 1.5兼容的字节码文件
    </configuration>
  </plugin>
                                                                                     
  除了为插件配置全局的参数，用户还可以为某个插件任务配置特定的参数。以maven-antrun-plugin
  为例，它有一个目标run，可以用来在Maven中调用Ant任务。用户将maven-antrun-plugin:run 
  绑定到多个生命周期阶段上，再加以不同的配置，就可以让Maven在不同的生命阶段执行不同的任
  务，如：

  <build>  
    <plugins>  
        <plugin>  
            <groupId>org.apache.maven.plugins</groupId>  
            <artifactId>maven-antrun-plugin</artifactId>  
            <version>1.3</version>  
            <executions>  
                <execution>  
                    <id>ant-validate</id>  
                    <phase>validate</phase>  
                    <goals>  
                        <goal>run</goal>  
                    </goals>  
                    <configuraction>  
                        <tasks>  
                            <echo>I'm bound to validate phase.</echo>  
                        </tasks>  
                    </configuraction>  
                </execution>  
                <execution>  
                    <id>ant-verify</id>  
                    <phase>verify</phase>  
                    <goals>  
                        <goal>run</goal>  
                    </goals>  
                    <configuraction>  
                        <tasks>  
                            <echo>I'm bound to verify phase.</echo>  
                        </tasks>  
                    </configuraction>  
                </execution>  
            </executions>  
        </plugin>  
    </plugins>  
  </build>  
                                                                                     
  在上述代码片段中，首先，maven-antrun-plugin:run 与 validate阶段绑定，从而构成一个id
  为ant-validate的任务。插件全局配置中得configuraction元素位于plugin元素下面，而这里的
  configuraction元素则位于execution元素下，表示这是特定任务的配置，而非插件整体的配置。
  这个ant-validate任务配置了一个echo Ant任务，向命令行输出一段文字，表示该任务是绑定到
  validate阶段的。第二个任务的id为ant-verify，它绑定到了verify阶段，同样它也输出了一段
  文字到命令行，告诉该任务绑定到了verify阶段。

--> 聚合 继承
  pass

--> 实例简介
 account-email模块  ：负责发送账户激活的电子邮件 
 account-persist模块：负责账户数据的持久化，以xml文件保存账户数据，支持账户的创建、读取、更新、删除  
 account-parent：依赖 account-email account-persist
  


 
  
